{"ast":null,"code":"var _jsxFileName = \"/Users/farshadghazanfari/Documents/www/npat/components/Game/ResultsTable.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Button, Spinner, FlexColumn, FlexContainer } from '../StyledComponents';\nimport theme from '../../constants/theme';\nimport { socket } from '../../constants/websocket';\nimport Papa from 'papaparse';\nconst TableContainer = styled.div.withConfig({\n  displayName: \"ResultsTable__TableContainer\",\n  componentId: \"sc-1lg56mx-0\"\n})([\"display:flex;flex-wrap:wrap;justify-content:space-around;\"]);\nconst Container = styled.div.withConfig({\n  displayName: \"ResultsTable__Container\",\n  componentId: \"sc-1lg56mx-1\"\n})([\"padding:20px 0;display:flex;flex-direction:row;justify-content:center;flex-wrap:wrap;\"]);\nconst Paper = styled.div.withConfig({\n  displayName: \"ResultsTable__Paper\",\n  componentId: \"sc-1lg56mx-2\"\n})([\"background:white;background-size:100% 1.2em;height:auto;margin:0 auto;margin-top:30px;box-shadow:#9e9e9e63 6px 7px 14px 0px;width:250px;padding:30px 30px 30px 30px;background-image:linear-gradient(90deg,transparent 49px,transparent 49px,transparent 51px,transparent 51px),linear-gradient(#eee .1em,transparent .1em);\"]);\nconst Submission = styled.span.withConfig({\n  displayName: \"ResultsTable__Submission\",\n  componentId: \"sc-1lg56mx-3\"\n})([\"color:\", \";word-break:break-all;\"], theme.colors.blue);\nconst StyledIncrementButton = styled.button.withConfig({\n  displayName: \"ResultsTable__StyledIncrementButton\",\n  componentId: \"sc-1lg56mx-4\"\n})([\"font-weight:bold;font-size:14px;border:\", \";color:\", \";cursor:\", \";\"], props => props.disabled ? '1px solid gray' : '1px solid black', props => props.disabled ? 'gray' : 'black', props => props.disabled ? 'not-allowed' : 'pointer');\nconst InputContainer = styled.div.withConfig({\n  displayName: \"ResultsTable__InputContainer\",\n  componentId: \"sc-1lg56mx-5\"\n})([\"margin-left:15px;font-size:1.5em;display:flex;align-items:center;width:80px;justify-content:space-between;\"]);\nconst NumberContainer = styled.div.withConfig({\n  displayName: \"ResultsTable__NumberContainer\",\n  componentId: \"sc-1lg56mx-6\"\n})([\"margin-left:15px;font-size:1.5em;display:flex;align-items:center;width:80px;justify-content:center;\"]);\n\nconst ResultsTable = ({\n  gameState,\n  round,\n  handleSubmitScore,\n  scoreSubmitted,\n  scorePartner\n}) => {\n  let initialScore = {};\n  const {\n    0: scores,\n    1: setScores\n  } = useState({});\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const categories = gameState.categories;\n  const currentAlphabet = gameState.currentAlphabet;\n  let scoringId = gameState.scoringType === \"cross\" ? scorePartner.id : socket.id;\n  let users = sortUserList([...gameState.users], scoringId);\n  users.forEach(user => {\n    categories.forEach(cat => {\n      let similar = similarityCheck(cat, users, user.id, round);\n\n      if (user.id === scoringId && similar.value) {\n        initialScore = Object.assign({}, initialScore, {\n          [cat]: 5\n        });\n      }\n    });\n  });\n  const {\n    0: currentScore,\n    1: setCurrentScore\n  } = useState(initialScore);\n  const {\n    0: gameData,\n    1: setGameData\n  } = useState({\n    currentScore: initialScore,\n    animalsSet: new Set(),\n    namesSet: new Set(),\n    thingsSet: new Set(),\n    placesSet: new Set(),\n    booksSet: new Set(),\n    celebritiesSet: new Set(),\n    fruitsSet: new Set(),\n    instrumentsSet: new Set(),\n    moviesSet: new Set(),\n    musiciansSet: new Set(),\n    songsSet: new Set(),\n    tv_showsSet: new Set(),\n    musiciansSet: new Set()\n  });\n\n  const parseCSV = async filePath => {\n    const response = await fetch(filePath);\n    const reader = response.body.getReader();\n    const result = await reader.read();\n    const decoder = new TextDecoder('utf-8');\n    const csv = decoder.decode(result.value);\n    return new Promise((resolve, reject) => {\n      Papa.parse(csv, {\n        complete: results => {\n          resolve(results.data.map(row => row[0]));\n        },\n        error: reject\n      });\n    });\n  };\n\n  useEffect(() => {\n    const categories = ['animals', 'places', 'names', 'things', 'books', 'songs', 'tv_shows', 'movies', 'instruments', 'musicians', 'fruits'];\n    const categoryPromises = categories.map(category => parseCSV(`/csv/${category}.csv`).then(data => ({\n      [`${category}Set`]: new Set(data.map(item => item.toLowerCase().trim()))\n    })));\n    Promise.all(categoryPromises).then(results => {\n      const newGameData = results.reduce((acc, currentSet) => {\n        return _objectSpread({}, acc, {}, currentSet);\n      }, {});\n      setGameData(prevGameData => _objectSpread({}, prevGameData, {}, newGameData));\n    });\n  }, []);\n\n  const scoreEntriesAI = async () => {\n    if (gameData.animalsSet.size === 0) {\n      console.log(\"Waiting for animalsSet to be populated...\");\n      return; // Exit if animalsSet is not ready\n    }\n\n    const newScores = {};\n\n    for (const category of categories) {\n      for (const user of gameState.users) {\n        const answer = user.responses[round][category];\n\n        if (answer) {\n          const score = await getScoreFromAPI(category, answer);\n          newScores[user.id] = _objectSpread({}, newScores[user.id] || {}, {\n            [category]: score\n          });\n        }\n      }\n    }\n\n    setScores(newScores);\n    setLoading(false);\n  };\n\n  const getScoreFromAPI = async (category, answer, gameState) => {\n    try {\n      const formattedAnswer = answer.toLowerCase().trim();\n      const categorySets = {\n        Animal: gameData.animalsSet,\n        Name: gameData.namesSet,\n        Thing: gameData.thingsSet,\n        Place: gameData.placesSet,\n        Songs: gameData.songsSet,\n        TV_shows: gameData.tv_showsSet,\n        Books: gameData.booksSet,\n        Celebrities: gameData.celebritiesSet,\n        Musicians: gameData.musiciansSet,\n        Instruments: gameData.instrumentsSet\n      };\n      let categorySet = categorySets[category] || new Set();\n      let isExactMatch = false;\n      let isSimilarMatch = false;\n      categorySet.forEach(item => {\n        if (formattedAnswer === item) {\n          isExactMatch = true;\n        } else if (formattedAnswer.includes(item) || item.includes(formattedAnswer)) {\n          isSimilarMatch = true;\n        }\n      }); //console.log(currentAlphabet);\n\n      if (!formattedAnswer.startsWith(currentAlphabet.toLowerCase())) {\n        console.log(`'${formattedAnswer}' does not start with the round letter '${currentAlphabet}'.`);\n        return -10; // Deduct points if it doesn't start with the round letter\n      }\n\n      if (isExactMatch) {\n        console.log(`'${formattedAnswer}' is an exact match in ${category}.`);\n        return 10; // Exact match\n      } else if (isSimilarMatch) {\n        console.log(`'${formattedAnswer}' is a similar match in ${category}.`);\n        return 5; // Similar match\n      } else {\n        console.log(`'${formattedAnswer}' is not found in the ${category} set.`);\n      }\n\n      return 0; // Answer is incorrect or not in the category\n    } catch (error) {\n      console.error(\"Error checking answer:\", error);\n      return 0;\n    }\n  };\n\n  let totalScore = 0;\n  useEffect(() => {\n    if (gameState.scoringType === \"ai\" && gameData.animalsSet.size > 0) {\n      scoreEntriesAI();\n    }\n  }, [gameState, round, gameData.animalsSet, gameData.namesSet, gameData.thingsSet, gameData.placesSet]); // Add animalsSet as a dependency\n\n  if (loading) {\n    return __jsx(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(React.Fragment, null, gameState.scoringType === \"ai\" ? __jsx(TableContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 3\n    }\n  }, gameState.users.map(user => __jsx(Paper, {\n    key: user.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }\n  }, user.name), gameState.categories.map(category => __jsx(\"div\", {\n    key: category,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }, category, \": \", __jsx(Submission, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 23\n    }\n  }, user.responses[round][category] || '-'), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }\n  }, \" Score: \", scores[user.id] && scores[user.id][category]))), __jsx(\"h3\", {\n    style: {\n      'text-align': 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }\n  }, \"Total Score: \", Object.values(scores[user.id] || {}).reduce((a, b) => a + b, 0))))) : __jsx(React.Fragment, null, gameState.scoringType === \"cross\" ? __jsx(FlexContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 42\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 57\n    }\n  }, \"You are scoring for \", __jsx(Submission, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 81\n    }\n  }, scorePartner.name), \"!\")) : false, __jsx(TableContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 5\n    }\n  }, users.map(user => __jsx(Paper, {\n    key: user.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 26\n    }\n  }, __jsx(\"h2\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 74\n    }\n  }, user.name), user.id === scoringId ? __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 36\n    }\n  }, \"Score\") : false), categories.map(category => {\n    let similar = similarityCheck(category, users, user.id, round);\n    let selfScoreCard = user.id === scoringId;\n    return __jsx(React.Fragment, {\n      key: category,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 18\n      }\n    }, similar.value && selfScoreCard ? __jsx(\"span\", {\n      style: {\n        color: theme.colors.red\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 47\n      }\n    }, scorePartner.name || 'You', \" and \", similar.name, \" put down the same word for \", category) : false, __jsx(\"div\", {\n      style: {\n        marginBottom: '10px',\n        display: \"flex\",\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      },\n      key: category,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      style: {\n        width: selfScoreCard ? \"150px\" : \"auto\",\n        fontSize: \"1.2em\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 15\n      }\n    }, category, \":\", `  `, \" \", __jsx(Submission, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 35\n      }\n    }, user.responses[round][category] || '-')), selfScoreCard ? user.responses[round][category] ? __jsx(InputContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 51\n      }\n    }, __jsx(NumberInput, {\n      category: category,\n      setCurrentScore: setCurrentScore,\n      currentScore: currentScore,\n      value: similar.value ? 5 : 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 19\n      }\n    }), \" \") : __jsx(NumberContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 167\n      }\n    }, \"0\") : ''));\n  }), user.id === scoringId ? __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 34\n    }\n  }, `Total Score: ${sumAllScores(currentScore)}`) : false)))), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 5\n    }\n  }, !scoreSubmitted ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: event => {\n      event.preventDefault();\n      handleSubmitScore(totalScore, scoringId);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }\n  }, \"Go Ahead!\")) : __jsx(FlexColumn, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 11\n    }\n  }, \"Waiting for others\"), __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 11\n    }\n  }))));\n};\n\nconst similarityCheck = (category, users, currentUserId, round) => {\n  let currentUser = users.find(user => user.id === currentUserId);\n  let currentUserResponse = currentUser.responses[round][category] ? currentUser.responses[round][category].toLowerCase().trim() : null;\n  let value = false;\n  let name = null;\n  users.filter(user => user.id !== currentUserId).forEach(user => {\n    let otherResponse = user.responses[round][category] ? user.responses[round][category].toLowerCase().trim() : null;\n\n    if (currentUserResponse && otherResponse && currentUserResponse === otherResponse) {\n      value = true;\n      name = user.name;\n    }\n\n    return;\n  });\n  return {\n    value,\n    name\n  };\n};\n\nconst sumAllScores = scores => Object.keys(scores).map(cat => scores[cat]).reduce((a, b) => a + b, 0);\n\nconst NumberInput = ({\n  value,\n  currentScore,\n  setCurrentScore,\n  category\n}) => {\n  const {\n    0: numberValue,\n    1: setNumberValue\n  } = useState(value);\n  useEffect(() => {\n    setCurrentScore(Object.assign({}, currentScore, {\n      [category]: value\n    }));\n  }, []);\n\n  const onMinus = () => {\n    setCurrentScore(Object.assign({}, currentScore, {\n      [category]: numberValue - 5\n    }));\n    if (!(numberValue <= 0)) setNumberValue(numberValue - 5);\n  };\n\n  const onPlus = () => {\n    setCurrentScore(Object.assign({}, currentScore, {\n      [category]: numberValue + 5\n    }));\n    if (!(numberValue >= 10)) setNumberValue(numberValue + 5);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(StyledIncrementButton, {\n    disabled: numberValue === 0,\n    onClick: () => onMinus(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 12\n    }\n  }, \"-\"), numberValue, __jsx(StyledIncrementButton, {\n    disabled: numberValue === 10,\n    onClick: () => onPlus(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 128\n    }\n  }, \"+\"));\n};\n\nconst sortUserList = (users, scoringId) => {\n  let index = users.findIndex(user => user.id === scoringId);\n\n  if (index != -1) {\n    let first = users.splice(index, 1)[0];\n    users.unshift(first);\n    return users;\n  }\n\n  return users;\n};\n\nexport default ResultsTable;","map":{"version":3,"sources":["/Users/farshadghazanfari/Documents/www/npat/components/Game/ResultsTable.js"],"names":["React","useState","useEffect","styled","Button","Spinner","FlexColumn","FlexContainer","theme","socket","Papa","TableContainer","div","Container","Paper","Submission","span","colors","blue","StyledIncrementButton","button","props","disabled","InputContainer","NumberContainer","ResultsTable","gameState","round","handleSubmitScore","scoreSubmitted","scorePartner","initialScore","scores","setScores","loading","setLoading","categories","currentAlphabet","scoringId","scoringType","id","users","sortUserList","forEach","user","cat","similar","similarityCheck","value","Object","assign","currentScore","setCurrentScore","gameData","setGameData","animalsSet","Set","namesSet","thingsSet","placesSet","booksSet","celebritiesSet","fruitsSet","instrumentsSet","moviesSet","musiciansSet","songsSet","tv_showsSet","parseCSV","filePath","response","fetch","reader","body","getReader","result","read","decoder","TextDecoder","csv","decode","Promise","resolve","reject","parse","complete","results","data","map","row","error","categoryPromises","category","then","item","toLowerCase","trim","all","newGameData","reduce","acc","currentSet","prevGameData","scoreEntriesAI","size","console","log","newScores","answer","responses","score","getScoreFromAPI","formattedAnswer","categorySets","Animal","Name","Thing","Place","Songs","TV_shows","Books","Celebrities","Musicians","Instruments","categorySet","isExactMatch","isSimilarMatch","includes","startsWith","totalScore","name","values","a","b","display","justifyContent","selfScoreCard","color","red","marginBottom","alignItems","width","fontSize","sumAllScores","event","preventDefault","currentUserId","currentUser","find","currentUserResponse","filter","otherResponse","keys","NumberInput","numberValue","setNumberValue","onMinus","onPlus","index","findIndex","first","splice","unshift"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Button, Spinner, FlexColumn, FlexContainer } from '../StyledComponents'\nimport theme from '../../constants/theme'\nimport { socket } from '../../constants/websocket'\nimport Papa from 'papaparse';\n\nconst TableContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`\n\nconst Container = styled.div`\n  padding: 20px 0;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  flex-wrap: wrap;\n`\n\nconst Paper = styled.div`\n  background: white;\n  background-size: 100% 1.2em;\n  height: auto;\n  margin: 0 auto;\n  margin-top: 30px;\n  box-shadow: #9e9e9e63 6px 7px 14px 0px;\n  width: 250px;\n  padding: 30px 30px 30px 30px;\n  background-image:\n  linear-gradient(90deg, transparent 49px, transparent 49px, transparent 51px, transparent 51px),\n  linear-gradient(#eee .1em, transparent .1em);\n`\n\nconst Submission = styled.span`\n  color: ${theme.colors.blue};\n  word-break: break-all;\n`\n\nconst StyledIncrementButton = styled.button`\n  font-weight: bold;\n  font-size: 14px;\n  border: ${props => props.disabled ? '1px solid gray' : '1px solid black'};\n  color: ${props => props.disabled ? 'gray' : 'black'};\n  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};\n`\n\nconst InputContainer = styled.div`\n  margin-left: 15px;\n  font-size: 1.5em;\n  display: flex;\n  align-items: center;\n  width: 80px;\n  justify-content: space-between;\n`\n\nconst NumberContainer = styled.div`\n  margin-left: 15px;\n  font-size: 1.5em;\n  display: flex;\n  align-items: center;\n  width: 80px;\n  justify-content: center;\n`\n\nconst ResultsTable = ({ gameState, round, handleSubmitScore, scoreSubmitted, scorePartner }) => {\n  let initialScore = {}\n  const [scores, setScores] = useState({});\n  const [loading, setLoading] = useState(true);\n  const categories = gameState.categories;\n  const currentAlphabet = gameState.currentAlphabet;\n  let scoringId = gameState.scoringType === \"cross\" ? scorePartner.id : socket.id;\n  let users = sortUserList([...gameState.users], scoringId);\n\n  users.forEach(user => {\n    categories.forEach(cat => {\n      let similar = similarityCheck(cat, users, user.id, round)\n      if (user.id === scoringId && similar.value) {\n\n        initialScore = Object.assign({}, initialScore, { [cat]: 5 })\n      }\n    })\n  })\n\n  const [currentScore, setCurrentScore] = useState(initialScore);\n \n  const [gameData, setGameData] = useState({\n    currentScore: initialScore,\n    animalsSet: new Set(),\n    namesSet: new Set(),\n    thingsSet: new Set(),\n    placesSet: new Set(),\n    \n    booksSet: new Set(),\n    celebritiesSet: new Set(),\n    fruitsSet: new Set(),\n    instrumentsSet: new Set(),\n    moviesSet: new Set(),\n    musiciansSet: new Set(),\n    songsSet: new Set(),\n    tv_showsSet: new Set(),\n    musiciansSet: new Set(),\n\n\n\n  });\n  const parseCSV = async (filePath) => {\n    const response = await fetch(filePath);\n    const reader = response.body.getReader();\n    const result = await reader.read();\n    const decoder = new TextDecoder('utf-8');\n    const csv = decoder.decode(result.value);\n    return new Promise((resolve, reject) => {\n      Papa.parse(csv, {\n        complete: (results) => {\n          resolve(results.data.map(row => row[0]));\n        },\n        error: reject\n      });\n    });\n  };\n\n  useEffect(() => {\n    const categories = ['animals', 'places', 'names', 'things', 'books', 'songs', 'tv_shows', 'movies', 'instruments', 'musicians', 'fruits'];\n    \n    const categoryPromises = categories.map(category =>\n      parseCSV(`/csv/${category}.csv`).then(data => ({\n        [`${category}Set`]: new Set(data.map(item => item.toLowerCase().trim()))\n      }))\n    );\n  \n    Promise.all(categoryPromises).then(results => {\n      const newGameData = results.reduce((acc, currentSet) => {\n        return { ...acc, ...currentSet };\n      }, {});\n  \n      setGameData(prevGameData => ({\n        ...prevGameData,\n        ...newGameData\n      }));\n    });\n  }, []);\n\n  const scoreEntriesAI = async () => {\n\n    if (gameData.animalsSet.size === 0) {\n      console.log(\"Waiting for animalsSet to be populated...\");\n      return; // Exit if animalsSet is not ready\n    }\n\n    const newScores = {};\n    for (const category of categories) {\n      for (const user of gameState.users) {\n        const answer = user.responses[round][category];\n        if (answer) {\n          const score = await getScoreFromAPI(category, answer);\n          newScores[user.id] = { ...(newScores[user.id] || {}), [category]: score };\n        }\n      }\n    }\n    setScores(newScores);\n    setLoading(false);\n  };\n\n\n  const getScoreFromAPI = async (category, answer,gameState) => {\n    try {\n        const formattedAnswer = answer.toLowerCase().trim();\n        const categorySets = {\n          Animal: gameData.animalsSet,\n          Name: gameData.namesSet,\n          Thing: gameData.thingsSet,\n          Place: gameData.placesSet,\n          Songs: gameData.songsSet,\n          TV_shows: gameData.tv_showsSet,\n          Books: gameData.booksSet,\n          Celebrities: gameData.celebritiesSet,\n          Musicians: gameData.musiciansSet,\n          Instruments: gameData.instrumentsSet,\n        };\n        \n        let categorySet = categorySets[category] || new Set();\n\n        let isExactMatch = false;\n        let isSimilarMatch = false;\n\n        categorySet.forEach(item => {\n            if (formattedAnswer === item) {\n                isExactMatch = true;\n            } else if (formattedAnswer.includes(item) || item.includes(formattedAnswer)) {\n                isSimilarMatch = true;\n            }\n        });\n        //console.log(currentAlphabet);\n        if (!formattedAnswer.startsWith(currentAlphabet.toLowerCase())) {\n          console.log(`'${formattedAnswer}' does not start with the round letter '${currentAlphabet}'.`);\n          return -10; // Deduct points if it doesn't start with the round letter\n        }\n\n\n        if (isExactMatch) {\n            console.log(`'${formattedAnswer}' is an exact match in ${category}.`);\n            return 10; // Exact match\n        } else if (isSimilarMatch) {\n            console.log(`'${formattedAnswer}' is a similar match in ${category}.`);\n            return 5; // Similar match\n        } else {\n            console.log(`'${formattedAnswer}' is not found in the ${category} set.`);\n        }\n\n        return 0; // Answer is incorrect or not in the category\n    } catch (error) {\n        console.error(\"Error checking answer:\", error);\n        return 0;\n    }\n};\n\n\n\n  let totalScore = 0;\n  useEffect(() => {\n    if(gameState.scoringType === \"ai\" && gameData.animalsSet.size > 0) {\n      scoreEntriesAI();\n    }\n  }, [gameState, round, gameData.animalsSet, gameData.namesSet, gameData.thingsSet, gameData.placesSet]); // Add animalsSet as a dependency\n  \n\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  return <>\n\n{gameState.scoringType === \"ai\" ? ( \n  <TableContainer>\n  {gameState.users.map(user => (\n    <Paper key={user.id}>\n      <h2>{user.name}</h2>\n      {gameState.categories.map(category => (\n        <div key={category}>\n          {category}: <Submission>{user.responses[round][category] || '-'}</Submission>\n          <span> Score: {scores[user.id] && scores[user.id][category]}</span>\n        </div>\n      ))}\n      <h3 style={{ 'text-align': 'center' }} >Total Score: {Object.values(scores[user.id] || {}).reduce((a, b) => a + b, 0)}</h3>\n    </Paper>\n  ))}\n</TableContainer>\n    ) : (\n      <>\n    {gameState.scoringType === \"cross\" ? <FlexContainer><h1>You are scoring for <Submission>{scorePartner.name}</Submission>!</h1></FlexContainer> : false}\n    <TableContainer>\n      {users.map(user => <Paper key={user.id}>\n        <h2 style={{ display: 'flex', justifyContent: 'space-between' }}><span>{user.name}</span>\n          {user.id === scoringId ? <span>Score</span> : false}\n        </h2>\n        {categories.map(category => {\n          let similar = similarityCheck(category, users, user.id, round)\n          let selfScoreCard = user.id === scoringId;\n          return <React.Fragment key={category}>\n            {similar.value && selfScoreCard ? <span style={{ color: theme.colors.red }}>{scorePartner.name || 'You'} and {similar.name} put down the same word for {category}</span> : false}\n            <div style={{ marginBottom: '10px', display: \"flex\", justifyContent: 'space-between', alignItems: 'center' }} key={category}>\n              <div style={{ width: selfScoreCard ? \"150px\" : \"auto\", fontSize: \"1.2em\" }}>\n                {category}:{`  `} <Submission>{user.responses[round][category] || '-'}</Submission>\n              </div>\n              {selfScoreCard ?\n                user.responses[round][category] ? <InputContainer>\n                  <NumberInput category={category} setCurrentScore={setCurrentScore} currentScore={currentScore} value={similar.value ? 5 : 0} /> </InputContainer> : <NumberContainer>0</NumberContainer>\n                : ''}\n            </div>\n          </React.Fragment>\n        }\n        )}\n        {user.id === scoringId ? <h2>{`Total Score: ${sumAllScores(currentScore)}`}</h2> : false}\n      </Paper>)}\n    </TableContainer>\n    </>\n    )}\n    <Container>\n      {!scoreSubmitted ? <>\n        <Button onClick={(event) => {\n          event.preventDefault()\n          handleSubmitScore(totalScore, scoringId)\n        }}>Go Ahead!</Button>\n      </> : <FlexColumn>\n          <h2>Waiting for others</h2>\n          <Spinner />\n        </FlexColumn>}\n    </Container>\n  </>\n  \n}\n\nconst similarityCheck = (category, users, currentUserId, round) => {\n  let currentUser = users.find(user => user.id === currentUserId);\n  let currentUserResponse = currentUser.responses[round][category] ? currentUser.responses[round][category].toLowerCase().trim() : null;\n\n  let value = false;\n  let name = null;\n  users.filter(user => user.id !== currentUserId).forEach(user => {\n    let otherResponse = user.responses[round][category] ? user.responses[round][category].toLowerCase().trim() : null;\n    if (currentUserResponse && otherResponse && (currentUserResponse === otherResponse)) {\n      value = true;\n      name = user.name\n    }\n    return;\n  })\n  return { value, name };\n}\n\nconst sumAllScores = (scores) => Object.keys(scores).map(cat => scores[cat]).reduce((a, b) => a + b, 0)\n\nconst NumberInput = ({ value, currentScore, setCurrentScore, category }) => {\n  const [numberValue, setNumberValue] = useState(value)\n  useEffect(() => {\n    setCurrentScore(Object.assign({}, currentScore, { [category]: value }))\n  }, [])\n\n  const onMinus = () => {\n    setCurrentScore(Object.assign({}, currentScore, { [category]: numberValue - 5 }))\n    if (!(numberValue <= 0)) setNumberValue(numberValue - 5)\n  }\n\n  const onPlus = () => {\n    setCurrentScore(Object.assign({}, currentScore, { [category]: numberValue + 5 }))\n    if (!(numberValue >= 10)) setNumberValue(numberValue + 5)\n  }\n  return <><StyledIncrementButton disabled={numberValue === 0} onClick={() => onMinus()}>-</StyledIncrementButton>{numberValue}<StyledIncrementButton disabled={numberValue === 10} onClick={() => onPlus()}>+</StyledIncrementButton></>\n}\n\n\nconst sortUserList = (users, scoringId) => {\n  let index = users.findIndex(user => user.id === scoringId);\n  if (index != -1) {\n    let first = users.splice(index, 1)[0];\n    users.unshift(first);\n    return users;\n  }\n  return users\n}\n\n\nexport default ResultsTable;"]},"metadata":{},"sourceType":"module"}