{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Button, Spinner, FlexColumn, FlexContainer } from '../StyledComponents';\nimport theme from '../../constants/theme';\nimport { socket } from '../../constants/websocket';\nimport Papa from 'papaparse';\nconst TableContainer = styled.div.withConfig({\n  displayName: \"ResultsTable__TableContainer\",\n  componentId: \"sc-1lg56mx-0\"\n})([\"display:flex;flex-wrap:wrap;justify-content:space-around;\"]);\nconst Container = styled.div.withConfig({\n  displayName: \"ResultsTable__Container\",\n  componentId: \"sc-1lg56mx-1\"\n})([\"padding:20px 0;display:flex;flex-direction:row;justify-content:center;flex-wrap:wrap;\"]);\nconst Paper = styled.div.withConfig({\n  displayName: \"ResultsTable__Paper\",\n  componentId: \"sc-1lg56mx-2\"\n})([\"background:white;background-size:100% 1.2em;height:auto;margin:0 auto;margin-top:30px;box-shadow:#9e9e9e63 6px 7px 14px 0px;width:250px;padding:30px 30px 30px 30px;background-image:linear-gradient(90deg,transparent 49px,transparent 49px,transparent 51px,transparent 51px),linear-gradient(#eee .1em,transparent .1em);\"]);\nconst Submission = styled.span.withConfig({\n  displayName: \"ResultsTable__Submission\",\n  componentId: \"sc-1lg56mx-3\"\n})([\"color:\", \";word-break:break-all;\"], theme.colors.blue);\nconst StyledIncrementButton = styled.button.withConfig({\n  displayName: \"ResultsTable__StyledIncrementButton\",\n  componentId: \"sc-1lg56mx-4\"\n})([\"font-weight:bold;font-size:14px;border:\", \";color:\", \";cursor:\", \";\"], props => props.disabled ? '1px solid gray' : '1px solid black', props => props.disabled ? 'gray' : 'black', props => props.disabled ? 'not-allowed' : 'pointer');\nconst InputContainer = styled.div.withConfig({\n  displayName: \"ResultsTable__InputContainer\",\n  componentId: \"sc-1lg56mx-5\"\n})([\"margin-left:15px;font-size:1.5em;display:flex;align-items:center;width:80px;justify-content:space-between;\"]);\nconst NumberContainer = styled.div.withConfig({\n  displayName: \"ResultsTable__NumberContainer\",\n  componentId: \"sc-1lg56mx-6\"\n})([\"margin-left:15px;font-size:1.5em;display:flex;align-items:center;width:80px;justify-content:center;\"]);\n\nconst ResultsTable = ({\n  gameState,\n  round,\n  handleSubmitScore,\n  scoreSubmitted,\n  scorePartner\n}) => {\n  let initialScore = {};\n  const {\n    0: scores,\n    1: setScores\n  } = useState({});\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const categories = gameState.categories;\n  const currentAlphabet = gameState.currentAlphabet;\n  let scoringId = gameState.scoringType === \"cross\" ? scorePartner.id : socket.id;\n  let users = sortUserList([...gameState.users], scoringId);\n  users.forEach(user => {\n    categories.forEach(cat => {\n      let similar = similarityCheck(cat, users, user.id, round);\n\n      if (user.id === scoringId && similar.value) {\n        initialScore = Object.assign({}, initialScore, {\n          [cat]: 5\n        });\n      }\n    });\n  });\n  const {\n    0: currentScore,\n    1: setCurrentScore\n  } = useState(initialScore);\n  const {\n    0: gameData,\n    1: setGameData\n  } = useState({\n    currentScore: initialScore,\n    animalsSet: new Set(),\n    namesSet: new Set(),\n    thingsSet: new Set(),\n    placesSet: new Set(),\n    booksSet: new Set(),\n    celebritiesSet: new Set(),\n    fruitsSet: new Set(),\n    instrumentsSet: new Set(),\n    moviesSet: new Set(),\n    musiciansSet: new Set(),\n    songsSet: new Set(),\n    tv_showsSet: new Set(),\n    musiciansSet: new Set()\n  });\n\n  const parseCSV = async filePath => {\n    const response = await fetch(filePath);\n    const reader = response.body.getReader();\n    const result = await reader.read();\n    const decoder = new TextDecoder('utf-8');\n    const csv = decoder.decode(result.value);\n    return new Promise((resolve, reject) => {\n      Papa.parse(csv, {\n        complete: results => {\n          resolve(results.data.map(row => row[0]));\n        },\n        error: reject\n      });\n    });\n  };\n\n  useEffect(() => {\n    const categories = ['animals', 'places', 'names', 'things', 'books', 'songs', 'tv_shows', 'movies', 'instruments', 'musicians', 'fruits'];\n    const categoryPromises = categories.map(category => parseCSV(`/csv/${category}.csv`).then(data => ({\n      [`${category}Set`]: new Set(data.map(item => item.toLowerCase().trim()))\n    })));\n    Promise.all(categoryPromises).then(results => {\n      const newGameData = results.reduce((acc, currentSet) => {\n        return _objectSpread({}, acc, {}, currentSet);\n      }, {});\n      setGameData(prevGameData => _objectSpread({}, prevGameData, {}, newGameData));\n    });\n  }, []);\n\n  const scoreEntriesAI = async () => {\n    if (gameData.animalsSet.size === 0) {\n      console.log(\"Waiting for animalsSet to be populated...\");\n      return; // Exit if animalsSet is not ready\n    }\n\n    const newScores = {};\n\n    for (const category of categories) {\n      for (const user of gameState.users) {\n        const answer = user.responses[round][category];\n\n        if (answer) {\n          const score = await getScoreFromAPI(category, answer);\n          newScores[user.id] = _objectSpread({}, newScores[user.id] || {}, {\n            [category]: score\n          });\n        }\n      }\n    }\n\n    setScores(newScores);\n    setLoading(false);\n  };\n\n  const getScoreFromAPI = async (category, answer, gameState) => {\n    try {\n      const formattedAnswer = answer.toLowerCase().trim();\n      const categorySets = {\n        Animal: gameData.animalsSet,\n        Name: gameData.namesSet,\n        Thing: gameData.thingsSet,\n        Place: gameData.placesSet,\n        Songs: gameData.songsSet,\n        TV_shows: gameData.tv_showsSet,\n        Books: gameData.booksSet,\n        Celebrities: gameData.celebritiesSet,\n        Musicians: gameData.musiciansSet,\n        Instruments: gameData.instrumentsSet\n      };\n      let categorySet = categorySets[category] || new Set();\n      let isExactMatch = false;\n      let isSimilarMatch = false;\n      categorySet.forEach(item => {\n        if (formattedAnswer === item) {\n          isExactMatch = true;\n        } else if (formattedAnswer.includes(item) || item.includes(formattedAnswer)) {\n          isSimilarMatch = true;\n        }\n      }); //console.log(currentAlphabet);\n\n      if (!formattedAnswer.startsWith(currentAlphabet.toLowerCase())) {\n        console.log(`'${formattedAnswer}' does not start with the round letter '${currentAlphabet}'.`);\n        return -10; // Deduct points if it doesn't start with the round letter\n      }\n\n      if (isExactMatch) {\n        console.log(`'${formattedAnswer}' is an exact match in ${category}.`);\n        return 10; // Exact match\n      } else if (isSimilarMatch) {\n        console.log(`'${formattedAnswer}' is a similar match in ${category}.`);\n        return 5; // Similar match\n      } else {\n        console.log(`'${formattedAnswer}' is not found in the ${category} set.`);\n      }\n\n      return 0; // Answer is incorrect or not in the category\n    } catch (error) {\n      console.error(\"Error checking answer:\", error);\n      return 0;\n    }\n  };\n\n  let totalScore = 0;\n  useEffect(() => {\n    if (gameState.scoringType === \"ai\" && gameData.animalsSet.size > 0) {\n      scoreEntriesAI();\n    }\n  }, [gameState, round, gameData.animalsSet, gameData.namesSet, gameData.thingsSet, gameData.placesSet]); // Add animalsSet as a dependency\n\n  if (loading) {\n    return __jsx(Spinner, null);\n  }\n\n  return __jsx(React.Fragment, null, gameState.scoringType === \"ai\" ? __jsx(TableContainer, null, gameState.users.map(user => __jsx(Paper, {\n    key: user.id\n  }, __jsx(\"h2\", null, user.name), gameState.categories.map(category => __jsx(\"div\", {\n    key: category\n  }, category, \": \", __jsx(Submission, null, user.responses[round][category] || '-'), __jsx(\"span\", null, \" Score: \", scores[user.id] && scores[user.id][category]))), __jsx(\"h3\", {\n    style: {\n      'text-align': 'center'\n    }\n  }, \"Total Score: \", Object.values(scores[user.id] || {}).reduce((a, b) => a + b, 0))))) : __jsx(React.Fragment, null, gameState.scoringType === \"cross\" ? __jsx(FlexContainer, null, __jsx(\"h1\", null, \"You are scoring for \", __jsx(Submission, null, scorePartner.name), \"!\")) : false, __jsx(TableContainer, null, users.map(user => __jsx(Paper, {\n    key: user.id\n  }, __jsx(\"h2\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between'\n    }\n  }, __jsx(\"span\", null, user.name), user.id === scoringId ? __jsx(\"span\", null, \"Score\") : false), categories.map(category => {\n    let similar = similarityCheck(category, users, user.id, round);\n    let selfScoreCard = user.id === scoringId;\n    return __jsx(React.Fragment, {\n      key: category\n    }, similar.value && selfScoreCard ? __jsx(\"span\", {\n      style: {\n        color: theme.colors.red\n      }\n    }, scorePartner.name || 'You', \" and \", similar.name, \" put down the same word for \", category) : false, __jsx(\"div\", {\n      style: {\n        marginBottom: '10px',\n        display: \"flex\",\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      },\n      key: category\n    }, __jsx(\"div\", {\n      style: {\n        width: selfScoreCard ? \"150px\" : \"auto\",\n        fontSize: \"1.2em\"\n      }\n    }, category, \":\", `  `, \" \", __jsx(Submission, null, user.responses[round][category] || '-')), selfScoreCard ? user.responses[round][category] ? __jsx(InputContainer, null, __jsx(NumberInput, {\n      category: category,\n      setCurrentScore: setCurrentScore,\n      currentScore: currentScore,\n      value: similar.value ? 5 : 0\n    }), \" \") : __jsx(NumberContainer, null, \"0\") : ''));\n  }), user.id === scoringId ? __jsx(\"h2\", null, `Total Score: ${sumAllScores(currentScore)}`) : false)))), __jsx(Container, null, !scoreSubmitted ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: event => {\n      event.preventDefault();\n      handleSubmitScore(totalScore, scoringId);\n    }\n  }, \"Go Next!\")) : __jsx(FlexColumn, null, __jsx(\"h2\", null, \"Waiting for others\"), __jsx(Spinner, null))));\n};\n\nconst similarityCheck = (category, users, currentUserId, round) => {\n  let currentUser = users.find(user => user.id === currentUserId);\n  let currentUserResponse = currentUser.responses[round][category] ? currentUser.responses[round][category].toLowerCase().trim() : null;\n  let value = false;\n  let name = null;\n  users.filter(user => user.id !== currentUserId).forEach(user => {\n    let otherResponse = user.responses[round][category] ? user.responses[round][category].toLowerCase().trim() : null;\n\n    if (currentUserResponse && otherResponse && currentUserResponse === otherResponse) {\n      value = true;\n      name = user.name;\n    }\n\n    return;\n  });\n  return {\n    value,\n    name\n  };\n};\n\nconst sumAllScores = scores => Object.keys(scores).map(cat => scores[cat]).reduce((a, b) => a + b, 0);\n\nconst NumberInput = ({\n  value,\n  currentScore,\n  setCurrentScore,\n  category\n}) => {\n  const {\n    0: numberValue,\n    1: setNumberValue\n  } = useState(value);\n  useEffect(() => {\n    setCurrentScore(Object.assign({}, currentScore, {\n      [category]: value\n    }));\n  }, []);\n\n  const onMinus = () => {\n    setCurrentScore(Object.assign({}, currentScore, {\n      [category]: numberValue - 5\n    }));\n    if (!(numberValue <= 0)) setNumberValue(numberValue - 5);\n  };\n\n  const onPlus = () => {\n    setCurrentScore(Object.assign({}, currentScore, {\n      [category]: numberValue + 5\n    }));\n    if (!(numberValue >= 10)) setNumberValue(numberValue + 5);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(StyledIncrementButton, {\n    disabled: numberValue === 0,\n    onClick: () => onMinus()\n  }, \"-\"), numberValue, __jsx(StyledIncrementButton, {\n    disabled: numberValue === 10,\n    onClick: () => onPlus()\n  }, \"+\"));\n};\n\nconst sortUserList = (users, scoringId) => {\n  let index = users.findIndex(user => user.id === scoringId);\n\n  if (index != -1) {\n    let first = users.splice(index, 1)[0];\n    users.unshift(first);\n    return users;\n  }\n\n  return users;\n};\n\nexport default ResultsTable;","map":null,"metadata":{},"sourceType":"module"}