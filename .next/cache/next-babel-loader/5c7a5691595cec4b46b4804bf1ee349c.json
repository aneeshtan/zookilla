{"ast":null,"code":"var _jsxFileName = \"/Users/farshadghazanfari/Documents/www/npat/components/Game/Play.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport theme from '../../constants/theme';\nimport { socket } from '../../constants/websocket';\nimport { FlexContainer, Spinner, ExitButton, ExitButtonContainer } from '../StyledComponents';\nimport InputTable from './InputTable';\nimport ResultsTable from './ResultsTable';\nimport ScoreTable from './ScoreTable';\nimport ActivePlayers from './PlayerList';\nimport GameHeader from './GameHeader';\nimport FinalScreen from './FinalScreen';\nimport StartGameScreen from './StartGameScreen';\nconst Container = styled.div.withConfig({\n  displayName: \"Play__Container\",\n  componentId: \"sc-q76vgx-0\"\n})([\"font-family:\", \";padding-top:80px;\"], theme.font);\nconst Play = ({\n  gameData,\n  setGamePlaying,\n  soundOn\n}) => {\n  const {\n    0: users,\n    1: setUsers\n  } = useState([]);\n  const {\n    0: code,\n    1: setCode\n  } = useState('');\n  const {\n    0: currentGameRound,\n    1: setCurrentGameRound\n  } = useState(1);\n  const {\n    0: responseSubmitted,\n    1: setResponseSubmitted\n  } = useState(false);\n  const {\n    0: scoreSubmitted,\n    1: setScoreSubmitted\n  } = useState(false);\n  const {\n    0: allScoresCollected,\n    1: setAllScoresCollected\n  } = useState(false);\n  const {\n    0: allResponsesCollected,\n    1: setAllResponsesCollected\n  } = useState(false);\n  const {\n    0: currentAlphabet,\n    1: setCurrentAlphabet\n  } = useState('');\n  const {\n    0: gameState,\n    1: setGameState\n  } = useState({});\n  const {\n    0: gameStarted,\n    1: startGame\n  } = useState(false);\n  const {\n    0: timerValue,\n    1: setTimerValue\n  } = useState(0);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: gameEnded,\n    1: setGameEnded\n  } = useState(false);\n  const {\n    0: finalScores,\n    1: setFinalScores\n  } = useState([]);\n  const {\n    0: maxRounds,\n    1: setMaxRounds\n  } = useState(0);\n  const {\n    0: categories,\n    1: setCategories\n  } = useState([]);\n  const {\n    0: isAdmin,\n    1: setAdmin\n  } = useState(gameData.isAdmin);\n  const {\n    0: scorePartner,\n    1: setScorePartner\n  } = useState({});\n\n  // const isAdmin = gameData.isAdmin;\n\n  useEffect(() => {\n    const {\n      code,\n      users,\n      maxRounds,\n      categories\n    } = gameData;\n    setUsers(users);\n    setCode(code);\n    setMaxRounds(Number(maxRounds));\n    setCategories(categories);\n  }, [gameData]);\n  useEffect(() => {\n    socket.on(\"restartGame\", () => {\n      setFinalScores([]);\n      setGameEnded(false);\n    });\n    socket.on(\"gameData\", ({\n      users\n    }) => {\n      setUsers(users);\n    });\n    socket.on(\"allSubmitted\", ({\n      gameState,\n      scorePartners\n    }) => {\n      setGameState(Object.assign({}, gameState));\n      scorePartners.forEach(scorePartner => {\n        if (scorePartner[0].id === socket.id) {\n          setScorePartner(scorePartner[1]);\n        }\n      });\n      setAllResponsesCollected(true);\n    });\n    socket.on(\"allScoresSubmitted\", ({\n      gameState\n    }) => {\n      setGameState(Object.assign({}, gameState));\n      setAllScoresCollected(true);\n    });\n    socket.on(\"allPlayersReady\", ({\n      gameState\n    }) => {\n      setLoading(true);\n      setGameState(Object.assign({}, gameState));\n      setCurrentGameRound(gameState.currentRound);\n      setResponseSubmitted(false);\n      setAllResponsesCollected(false);\n      setAllScoresCollected(false);\n      setScoreSubmitted(false);\n      setTimerValue(0);\n      setCurrentAlphabet(gameState.currentAlphabet);\n      setLoading(false);\n    });\n    socket.on(\"gameStarted\", ({\n      gameState\n    }) => {\n      startGame(gameState.started);\n      setCurrentAlphabet(gameState.currentAlphabet);\n    });\n    socket.on(\"gameEnded\", ({\n      scores,\n      gameState\n    }) => {\n      setLoading(true);\n      setGameState(Object.assign({}, gameState));\n      setCurrentGameRound(1);\n      setResponseSubmitted(false);\n      setAllResponsesCollected(false);\n      setAllScoresCollected(false);\n      setScoreSubmitted(false);\n      setTimerValue(0);\n      setCurrentAlphabet('');\n      setGameEnded(true);\n      startGame(false);\n      setLoading(false);\n      setUsers(gameState.users);\n      // New person who starts the game will be admin\n      setAdmin(false);\n      setFinalScores(scores);\n    });\n    socket.on(\"timerValue\", ({\n      timer\n    }) => {\n      setTimerValue(timer);\n    });\n  }, []);\n\n  // Sumbit users respnse\n  const sendResponse = response => {\n    // forEach category, make a response object\n    socket.emit('sendResponse', {\n      code,\n      response,\n      round: currentGameRound\n    }, () => {\n      setResponseSubmitted(true);\n      socket.emit('stopTimer', {\n        code\n      });\n    });\n  };\n  const handleSubmitScore = (score, id) => {\n    let submitScore;\n    submitScore = score ? score : 0;\n    socket.emit('sendScore', {\n      id,\n      code,\n      score: submitScore,\n      round: currentGameRound\n    }, ({\n      error,\n      gameState\n    }) => {\n      if (error) alert(error);else if (gameState) {\n        setScoreSubmitted(true);\n      }\n    });\n  };\n  const handleStartGame = () => {\n    socket.emit('startGame', {\n      code\n    }, gameState => {\n      if (gameState) {\n        startGame(gameState.started);\n        setLoading(false);\n      }\n    });\n  };\n  const handleRestartGame = event => {\n    event.preventDefault();\n    startGame(false);\n    socket.emit('restartGame', {\n      code\n    }, () => {\n      setFinalScores([]);\n      setGameEnded(false);\n      setAdmin(true);\n    });\n  };\n  const handleStartNextRound = () => {\n    // If everyone is ready to start next round, then start next round \n    socket.emit('playerReady', {\n      code,\n      round: currentGameRound\n    }, ({\n      gameState\n    }) => {\n      if (gameState) {}\n    });\n  };\n  const renderGameState = () => {\n    if (loading) return __jsx(FlexContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 25\n      }\n    }, __jsx(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 40\n      }\n    }));\n    if (gameEnded) return __jsx(FinalScreen, {\n      handleRestartGame: handleRestartGame,\n      scores: finalScores,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 27\n      }\n    });\n    if (!gameStarted) return __jsx(StartGameScreen, {\n      handleStartGame: handleStartGame,\n      isAdmin: isAdmin,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 30\n      }\n    });else if (allScoresCollected) return __jsx(ScoreTable, {\n      maxRounds: maxRounds,\n      handleStartNextRound: handleStartNextRound,\n      round: currentGameRound,\n      gameState: gameState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 14\n      }\n    });else if (responseSubmitted && !allResponsesCollected) return __jsx(FlexContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 14\n      }\n    }, __jsx(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 29\n      }\n    }));else if (allResponsesCollected) return __jsx(ResultsTable, {\n      scorePartner: scorePartner,\n      scoreSubmitted: scoreSubmitted,\n      handleSubmitScore: handleSubmitScore,\n      round: currentGameRound,\n      gameState: gameState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 14\n      }\n    });else return __jsx(React.Fragment, null, gameStarted ? __jsx(GameHeader, {\n      soundOn: soundOn,\n      maxRounds: maxRounds,\n      timerValue: timerValue,\n      roundNumber: currentGameRound,\n      currentAlphabet: currentAlphabet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 26\n      }\n    }) : false, __jsx(InputTable, {\n      categories: categories,\n      timerValue: timerValue,\n      sendResponse: sendResponse,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }));\n  };\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 10\n    }\n  }, __jsx(ExitButtonContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }\n  }, __jsx(ExitButton, {\n    onClick: () => {\n      socket.emit('removeUserFromGame', {\n        code\n      }, () => {\n        setGamePlaying(false);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 26\n    }\n  }, \"X\")), !gameEnded && __jsx(ActivePlayers, {\n    code: code,\n    gameStarted: gameStarted || gameEnded,\n    users: users,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 20\n    }\n  }), renderGameState());\n};\nexport default Play;","map":{"version":3,"names":["React","useState","useEffect","styled","theme","socket","FlexContainer","Spinner","ExitButton","ExitButtonContainer","InputTable","ResultsTable","ScoreTable","ActivePlayers","GameHeader","FinalScreen","StartGameScreen","Container","div","withConfig","displayName","componentId","font","Play","gameData","setGamePlaying","soundOn","users","setUsers","code","setCode","currentGameRound","setCurrentGameRound","responseSubmitted","setResponseSubmitted","scoreSubmitted","setScoreSubmitted","allScoresCollected","setAllScoresCollected","allResponsesCollected","setAllResponsesCollected","currentAlphabet","setCurrentAlphabet","gameState","setGameState","gameStarted","startGame","timerValue","setTimerValue","loading","setLoading","gameEnded","setGameEnded","finalScores","setFinalScores","maxRounds","setMaxRounds","categories","setCategories","isAdmin","setAdmin","scorePartner","setScorePartner","Number","on","scorePartners","Object","assign","forEach","id","currentRound","started","scores","timer","sendResponse","response","emit","round","handleSubmitScore","score","submitScore","error","alert","handleStartGame","handleRestartGame","event","preventDefault","handleStartNextRound","renderGameState","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","roundNumber","onClick"],"sources":["/Users/farshadghazanfari/Documents/www/npat/components/Game/Play.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components'\n\nimport theme from '../../constants/theme'\nimport { socket } from '../../constants/websocket'\nimport { FlexContainer, Spinner, ExitButton, ExitButtonContainer } from '../StyledComponents'\n\nimport InputTable from './InputTable'\nimport ResultsTable from './ResultsTable'\nimport ScoreTable from './ScoreTable'\nimport ActivePlayers from './PlayerList'\nimport GameHeader from './GameHeader'\nimport FinalScreen from './FinalScreen'\nimport StartGameScreen from './StartGameScreen'\n\nconst Container = styled.div`\n  font-family: ${theme.font};\n  padding-top: 80px;\n`\n\nconst Play = ({ gameData, setGamePlaying, soundOn }) => {\n  const [users, setUsers] = useState([]);\n  const [code, setCode] = useState('');\n  const [currentGameRound, setCurrentGameRound] = useState(1);\n  const [responseSubmitted, setResponseSubmitted] = useState(false);\n  const [scoreSubmitted, setScoreSubmitted] = useState(false);\n  const [allScoresCollected, setAllScoresCollected] = useState(false);\n  const [allResponsesCollected, setAllResponsesCollected] = useState(false);\n  const [currentAlphabet, setCurrentAlphabet] = useState('')\n  const [gameState, setGameState] = useState({});\n  const [gameStarted, startGame] = useState(false);\n  const [timerValue, setTimerValue] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [gameEnded, setGameEnded] = useState(false);\n  const [finalScores, setFinalScores] = useState([]);\n  const [maxRounds, setMaxRounds] = useState(0);\n  const [categories, setCategories] = useState([])\n  const [isAdmin, setAdmin] = useState(gameData.isAdmin)\n  const [scorePartner, setScorePartner] = useState({})\n\n\n  // const isAdmin = gameData.isAdmin;\n\n  useEffect(() => {\n    const { code, users, maxRounds, categories } = gameData;\n    setUsers(users);\n    setCode(code);\n    setMaxRounds(Number(maxRounds))\n    setCategories(categories)\n\n  }, [gameData]);\n\n  useEffect(() => {\n    socket.on(\"restartGame\", () => {\n      setFinalScores([]);\n      setGameEnded(false);\n    })\n\n    socket.on(\"gameData\", ({ users }) => {\n      setUsers(users);\n    });\n\n    socket.on(\"allSubmitted\", ({ gameState, scorePartners }) => {\n      setGameState(Object.assign({}, gameState))\n      scorePartners.forEach(scorePartner => {\n        if (scorePartner[0].id === socket.id) {\n          setScorePartner(scorePartner[1])\n        }\n      })\n      setAllResponsesCollected(true)\n    })\n\n    socket.on(\"allScoresSubmitted\", ({ gameState }) => {\n      setGameState(Object.assign({}, gameState))\n      setAllScoresCollected(true)\n    })\n\n    socket.on(\"allPlayersReady\", ({ gameState }) => {\n      setLoading(true)\n      setGameState(Object.assign({}, gameState))\n      setCurrentGameRound(gameState.currentRound);\n      setResponseSubmitted(false);\n      setAllResponsesCollected(false);\n      setAllScoresCollected(false);\n      setScoreSubmitted(false);\n      setTimerValue(0)\n      setCurrentAlphabet(gameState.currentAlphabet)\n      setLoading(false)\n    })\n\n    socket.on(\"gameStarted\", ({ gameState }) => {\n      startGame(gameState.started);\n      setCurrentAlphabet(gameState.currentAlphabet)\n    });\n\n    socket.on(\"gameEnded\", ({ scores, gameState }) => {\n      setLoading(true)\n      setGameState(Object.assign({}, gameState))\n      setCurrentGameRound(1);\n      setResponseSubmitted(false);\n      setAllResponsesCollected(false);\n      setAllScoresCollected(false);\n      setScoreSubmitted(false);\n      setTimerValue(0)\n      setCurrentAlphabet('')\n      setGameEnded(true)\n      startGame(false)\n      setLoading(false)\n      setUsers(gameState.users)\n      // New person who starts the game will be admin\n      setAdmin(false);\n      setFinalScores(scores)\n    });\n\n\n    socket.on(\"timerValue\", ({ timer }) => {\n      setTimerValue(timer)\n    })\n  }, []);\n\n  // Sumbit users respnse\n  const sendResponse = (response) => {\n    // forEach category, make a response object\n    socket.emit('sendResponse', { code, response, round: currentGameRound }, () => {\n      setResponseSubmitted(true)\n      socket.emit('stopTimer', { code })\n    })\n  }\n\n  const handleSubmitScore = (score, id) => {\n    let submitScore;\n    submitScore = score ? score : 0;\n    socket.emit('sendScore', { id, code, score: submitScore, round: currentGameRound }, ({ error, gameState }) => {\n      if (error) alert(error)\n      else if (gameState) {\n        setScoreSubmitted(true)\n      }\n    })\n  }\n\n  const handleStartGame = () => {\n    socket.emit('startGame', { code }, (gameState) => {\n      if (gameState) {\n        startGame(gameState.started)\n        setLoading(false)\n      }\n    })\n  }\n\n  const handleRestartGame = (event) => {\n    event.preventDefault()\n    startGame(false);\n    socket.emit('restartGame', { code }, () => {\n      setFinalScores([]);\n      setGameEnded(false);\n      setAdmin(true);\n    })\n\n  }\n\n  const handleStartNextRound = () => {\n    // If everyone is ready to start next round, then start next round \n    socket.emit('playerReady', { code, round: currentGameRound }, ({ gameState }) => {\n      if (gameState) {\n\n      }\n    })\n  }\n\n  const renderGameState = () => {\n    if (loading) return <FlexContainer><Spinner /></FlexContainer>\n    if (gameEnded) return <FinalScreen handleRestartGame={handleRestartGame} scores={finalScores} />\n    if (!gameStarted) return <StartGameScreen handleStartGame={handleStartGame} isAdmin={isAdmin} />\n    else if (allScoresCollected)\n      return <ScoreTable maxRounds={maxRounds} handleStartNextRound={handleStartNextRound} round={currentGameRound} gameState={gameState} />\n    else if (responseSubmitted && !allResponsesCollected)\n      return <FlexContainer><Spinner /></FlexContainer>\n    else if (allResponsesCollected)\n      return <ResultsTable scorePartner={scorePartner} scoreSubmitted={scoreSubmitted} handleSubmitScore={handleSubmitScore} round={currentGameRound} gameState={gameState} />\n    else\n      return <>\n        {(gameStarted) ? <GameHeader soundOn={soundOn} maxRounds={maxRounds} timerValue={timerValue} roundNumber={currentGameRound} currentAlphabet={currentAlphabet} /> : false}\n        <InputTable categories={categories} timerValue={timerValue} sendResponse={sendResponse} />\n      </>\n  }\n\n  return <Container>\n    <ExitButtonContainer><ExitButton onClick={() => {\n      socket.emit('removeUserFromGame', { code }, () => {\n        setGamePlaying(false)\n      })\n    }}>X</ExitButton></ExitButtonContainer>\n    {!gameEnded && <ActivePlayers code={code} gameStarted={gameStarted || gameEnded} users={users} />}\n    {renderGameState()}\n  </Container>\n}\n\nexport default Play;"],"mappings":"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"},"metadata":{},"sourceType":"module"}