{"ast":null,"code":"var _jsxFileName = \"/Users/farshadghazanfari/Documents/www/npat/components/Game/Play.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport theme from '../../constants/theme';\nimport { socket } from '../../constants/websocket';\nimport { FlexContainer, Spinner, ExitButton, ExitButtonContainer } from '../StyledComponents';\nimport InputTable from './InputTable';\nimport ResultsTable from './ResultsTable';\nimport ScoreTable from './ScoreTable';\nimport ActivePlayers from './PlayerList';\nimport GameHeader from './GameHeader';\nimport FinalScreen from './FinalScreen';\nimport StartGameScreen from './StartGameScreen';\nconst Container = styled.div.withConfig({\n  displayName: \"Play__Container\",\n  componentId: \"q76vgx-0\"\n})([\"font-family:\", \";padding-top:80px;\"], theme.font);\n\nconst Play = ({\n  gameData,\n  setGamePlaying,\n  soundOn\n}) => {\n  const {\n    0: users,\n    1: setUsers\n  } = useState([]);\n  const {\n    0: code,\n    1: setCode\n  } = useState('');\n  const {\n    0: currentGameRound,\n    1: setCurrentGameRound\n  } = useState(1);\n  const {\n    0: responseSubmitted,\n    1: setResponseSubmitted\n  } = useState(false);\n  const {\n    0: scoreSubmitted,\n    1: setScoreSubmitted\n  } = useState(false);\n  const {\n    0: allScoresCollected,\n    1: setAllScoresCollected\n  } = useState(false);\n  const {\n    0: allResponsesCollected,\n    1: setAllResponsesCollected\n  } = useState(false);\n  const {\n    0: currentAlphabet,\n    1: setCurrentAlphabet\n  } = useState('');\n  const {\n    0: gameState,\n    1: setGameState\n  } = useState({});\n  const {\n    0: gameStarted,\n    1: startGame\n  } = useState(false);\n  const {\n    0: timerValue,\n    1: setTimerValue\n  } = useState(0);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: gameEnded,\n    1: setGameEnded\n  } = useState(false);\n  const {\n    0: finalScores,\n    1: setFinalScores\n  } = useState([]);\n  const {\n    0: maxRounds,\n    1: setMaxRounds\n  } = useState(0);\n  const {\n    0: categories,\n    1: setCategories\n  } = useState([]);\n  const {\n    0: isAdmin,\n    1: setAdmin\n  } = useState(gameData.isAdmin);\n  const {\n    0: scorePartner,\n    1: setScorePartner\n  } = useState({}); // const isAdmin = gameData.isAdmin;\n\n  useEffect(() => {\n    const {\n      code,\n      users,\n      maxRounds,\n      categories\n    } = gameData;\n    setUsers(users);\n    setCode(code);\n    setMaxRounds(Number(maxRounds));\n    setCategories(categories);\n  }, [gameData]);\n  useEffect(() => {\n    socket.on(\"restartGame\", () => {\n      setFinalScores([]);\n      setGameEnded(false);\n    });\n    socket.on(\"gameData\", ({\n      users\n    }) => {\n      setUsers(users);\n    });\n    socket.on(\"allSubmitted\", ({\n      gameState,\n      scorePartners\n    }) => {\n      setGameState(Object.assign({}, gameState));\n      scorePartners.forEach(scorePartner => {\n        if (scorePartner[0].id === socket.id) {\n          setScorePartner(scorePartner[1]);\n        }\n      });\n      setAllResponsesCollected(true);\n    });\n    socket.on(\"allScoresSubmitted\", ({\n      gameState\n    }) => {\n      setGameState(Object.assign({}, gameState));\n      setAllScoresCollected(true);\n    });\n    socket.on(\"allPlayersReady\", ({\n      gameState\n    }) => {\n      setLoading(true);\n      setGameState(Object.assign({}, gameState));\n      setCurrentGameRound(gameState.currentRound);\n      setResponseSubmitted(false);\n      setAllResponsesCollected(false);\n      setAllScoresCollected(false);\n      setScoreSubmitted(false);\n      setTimerValue(0);\n      setCurrentAlphabet(gameState.currentAlphabet);\n      setLoading(false);\n    });\n    socket.on(\"gameStarted\", ({\n      gameState\n    }) => {\n      startGame(gameState.started);\n      setCurrentAlphabet(gameState.currentAlphabet);\n    });\n    socket.on(\"gameEnded\", ({\n      scores,\n      gameState\n    }) => {\n      setLoading(true);\n      setGameState(Object.assign({}, gameState));\n      setCurrentGameRound(1);\n      setResponseSubmitted(false);\n      setAllResponsesCollected(false);\n      setAllScoresCollected(false);\n      setScoreSubmitted(false);\n      setTimerValue(0);\n      setCurrentAlphabet('');\n      setGameEnded(true);\n      startGame(false);\n      setLoading(false);\n      setUsers(gameState.users); // New person who starts the game will be admin\n\n      setAdmin(false);\n      setFinalScores(scores);\n    });\n    socket.on(\"timerValue\", ({\n      timer\n    }) => {\n      setTimerValue(timer);\n    });\n  }, []); // Sumbit users respnse\n\n  const sendResponse = response => {\n    // forEach category, make a response object\n    socket.emit('sendResponse', {\n      code,\n      response,\n      round: currentGameRound\n    }, () => {\n      setResponseSubmitted(true);\n      socket.emit('stopTimer', {\n        code\n      });\n    });\n  };\n\n  const handleSubmitScore = (score, id) => {\n    let submitScore;\n    submitScore = score ? score : 0;\n    socket.emit('sendScore', {\n      id,\n      code,\n      score: submitScore,\n      round: currentGameRound\n    }, ({\n      error,\n      gameState\n    }) => {\n      if (error) alert(error);else if (gameState) {\n        setScoreSubmitted(true);\n      }\n    });\n  };\n\n  const handleStartGame = () => {\n    socket.emit('startGame', {\n      code\n    }, gameState => {\n      if (gameState) {\n        startGame(gameState.started);\n        setLoading(false);\n      }\n    });\n  };\n\n  const handleRestartGame = event => {\n    event.preventDefault();\n    startGame(false);\n    socket.emit('restartGame', {\n      code\n    }, () => {\n      setFinalScores([]);\n      setGameEnded(false);\n      setAdmin(true);\n    });\n  };\n\n  const handleStartNextRound = () => {\n    // If everyone is ready to start next round, then start next round \n    socket.emit('playerReady', {\n      code,\n      round: currentGameRound\n    }, ({\n      gameState\n    }) => {\n      if (gameState) {}\n    });\n  };\n\n  const renderGameState = () => {\n    if (loading) return __jsx(FlexContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 25\n      }\n    }, __jsx(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 40\n      }\n    }));\n    if (gameEnded) return __jsx(FinalScreen, {\n      handleRestartGame: handleRestartGame,\n      scores: finalScores,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 27\n      }\n    });\n    if (!gameStarted) return __jsx(StartGameScreen, {\n      handleStartGame: handleStartGame,\n      isAdmin: isAdmin,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 30\n      }\n    });else if (allScoresCollected) return __jsx(ScoreTable, {\n      maxRounds: maxRounds,\n      handleStartNextRound: handleStartNextRound,\n      round: currentGameRound,\n      gameState: gameState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 14\n      }\n    });else if (responseSubmitted && !allResponsesCollected) return __jsx(FlexContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 14\n      }\n    }, __jsx(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 29\n      }\n    }));else if (allResponsesCollected) return __jsx(ResultsTable, {\n      scorePartner: scorePartner,\n      scoreSubmitted: scoreSubmitted,\n      handleSubmitScore: handleSubmitScore,\n      round: currentGameRound,\n      gameState: gameState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 14\n      }\n    });else return __jsx(React.Fragment, null, gameStarted ? __jsx(GameHeader, {\n      soundOn: soundOn,\n      maxRounds: maxRounds,\n      timerValue: timerValue,\n      roundNumber: currentGameRound,\n      currentAlphabet: currentAlphabet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 26\n      }\n    }) : false, __jsx(InputTable, {\n      categories: categories,\n      timerValue: timerValue,\n      sendResponse: sendResponse,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 10\n    }\n  }, __jsx(ExitButtonContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }\n  }, __jsx(ExitButton, {\n    onClick: () => {\n      socket.emit('removeUserFromGame', {\n        code\n      }, () => {\n        gtag(\"event\", \"close_game\");\n        setGamePlaying(false);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 26\n    }\n  }, \"X\")), !gameEnded && __jsx(ActivePlayers, {\n    code: code,\n    gameStarted: gameStarted || gameEnded,\n    users: users,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 20\n    }\n  }), renderGameState());\n};\n\nexport default Play;","map":{"version":3,"sources":["/Users/farshadghazanfari/Documents/www/npat/components/Game/Play.js"],"names":["React","useState","useEffect","styled","theme","socket","FlexContainer","Spinner","ExitButton","ExitButtonContainer","InputTable","ResultsTable","ScoreTable","ActivePlayers","GameHeader","FinalScreen","StartGameScreen","Container","div","font","Play","gameData","setGamePlaying","soundOn","users","setUsers","code","setCode","currentGameRound","setCurrentGameRound","responseSubmitted","setResponseSubmitted","scoreSubmitted","setScoreSubmitted","allScoresCollected","setAllScoresCollected","allResponsesCollected","setAllResponsesCollected","currentAlphabet","setCurrentAlphabet","gameState","setGameState","gameStarted","startGame","timerValue","setTimerValue","loading","setLoading","gameEnded","setGameEnded","finalScores","setFinalScores","maxRounds","setMaxRounds","categories","setCategories","isAdmin","setAdmin","scorePartner","setScorePartner","Number","on","scorePartners","Object","assign","forEach","id","currentRound","started","scores","timer","sendResponse","response","emit","round","handleSubmitScore","score","submitScore","error","alert","handleStartGame","handleRestartGame","event","preventDefault","handleStartNextRound","renderGameState","gtag"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components'\n\nimport theme from '../../constants/theme'\nimport { socket } from '../../constants/websocket'\nimport { FlexContainer, Spinner, ExitButton, ExitButtonContainer } from '../StyledComponents'\n\nimport InputTable from './InputTable'\nimport ResultsTable from './ResultsTable'\nimport ScoreTable from './ScoreTable'\nimport ActivePlayers from './PlayerList'\nimport GameHeader from './GameHeader'\nimport FinalScreen from './FinalScreen'\nimport StartGameScreen from './StartGameScreen'\n\nconst Container = styled.div`\n  font-family: ${theme.font};\n  padding-top: 80px;\n`\n\nconst Play = ({ gameData, setGamePlaying, soundOn }) => {\n  const [users, setUsers] = useState([]);\n  const [code, setCode] = useState('');\n  const [currentGameRound, setCurrentGameRound] = useState(1);\n  const [responseSubmitted, setResponseSubmitted] = useState(false);\n  const [scoreSubmitted, setScoreSubmitted] = useState(false);\n  const [allScoresCollected, setAllScoresCollected] = useState(false);\n  const [allResponsesCollected, setAllResponsesCollected] = useState(false);\n  const [currentAlphabet, setCurrentAlphabet] = useState('')\n  const [gameState, setGameState] = useState({});\n  const [gameStarted, startGame] = useState(false);\n  const [timerValue, setTimerValue] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [gameEnded, setGameEnded] = useState(false);\n  const [finalScores, setFinalScores] = useState([]);\n  const [maxRounds, setMaxRounds] = useState(0);\n  const [categories, setCategories] = useState([])\n  const [isAdmin, setAdmin] = useState(gameData.isAdmin)\n  const [scorePartner, setScorePartner] = useState({})\n\n\n  // const isAdmin = gameData.isAdmin;\n\n  useEffect(() => {\n    const { code, users, maxRounds, categories } = gameData;\n    setUsers(users);\n    setCode(code);\n    setMaxRounds(Number(maxRounds))\n    setCategories(categories)\n\n  }, [gameData]);\n\n  useEffect(() => {\n    socket.on(\"restartGame\", () => {\n      setFinalScores([]);\n      setGameEnded(false);\n    })\n\n    socket.on(\"gameData\", ({ users }) => {\n      setUsers(users);\n    });\n\n    socket.on(\"allSubmitted\", ({ gameState, scorePartners }) => {\n      setGameState(Object.assign({}, gameState))\n      scorePartners.forEach(scorePartner => {\n        if (scorePartner[0].id === socket.id) {\n          setScorePartner(scorePartner[1])\n        }\n      })\n      setAllResponsesCollected(true)\n    })\n\n    socket.on(\"allScoresSubmitted\", ({ gameState }) => {\n      setGameState(Object.assign({}, gameState))\n      setAllScoresCollected(true)\n    })\n\n    socket.on(\"allPlayersReady\", ({ gameState }) => {\n      setLoading(true)\n      setGameState(Object.assign({}, gameState))\n      setCurrentGameRound(gameState.currentRound);\n      setResponseSubmitted(false);\n      setAllResponsesCollected(false);\n      setAllScoresCollected(false);\n      setScoreSubmitted(false);\n      setTimerValue(0)\n      setCurrentAlphabet(gameState.currentAlphabet)\n      setLoading(false)\n    })\n\n    socket.on(\"gameStarted\", ({ gameState }) => {\n      startGame(gameState.started);\n      setCurrentAlphabet(gameState.currentAlphabet)\n    });\n\n    socket.on(\"gameEnded\", ({ scores, gameState }) => {\n      setLoading(true)\n      setGameState(Object.assign({}, gameState))\n      setCurrentGameRound(1);\n      setResponseSubmitted(false);\n      setAllResponsesCollected(false);\n      setAllScoresCollected(false);\n      setScoreSubmitted(false);\n      setTimerValue(0)\n      setCurrentAlphabet('')\n      setGameEnded(true)\n      startGame(false)\n      setLoading(false)\n      setUsers(gameState.users)\n      // New person who starts the game will be admin\n      setAdmin(false);\n      setFinalScores(scores)\n    });\n\n\n    socket.on(\"timerValue\", ({ timer }) => {\n      setTimerValue(timer)\n    })\n  }, []);\n\n  // Sumbit users respnse\n  const sendResponse = (response) => {\n    // forEach category, make a response object\n    socket.emit('sendResponse', { code, response, round: currentGameRound }, () => {\n      setResponseSubmitted(true)\n      socket.emit('stopTimer', { code })\n    })\n  }\n\n  const handleSubmitScore = (score, id) => {\n    let submitScore;\n    submitScore = score ? score : 0;\n    socket.emit('sendScore', { id, code, score: submitScore, round: currentGameRound }, ({ error, gameState }) => {\n      if (error) alert(error)\n      else if (gameState) {\n        setScoreSubmitted(true)\n      }\n    })\n  }\n\n  const handleStartGame = () => {\n    socket.emit('startGame', { code }, (gameState) => {\n      if (gameState) {\n        startGame(gameState.started)\n        setLoading(false)\n      }\n    })\n  }\n\n  const handleRestartGame = (event) => {\n    event.preventDefault()\n    startGame(false);\n    socket.emit('restartGame', { code }, () => {\n      setFinalScores([]);\n      setGameEnded(false);\n      setAdmin(true);\n    })\n\n  }\n\n  const handleStartNextRound = () => {\n    // If everyone is ready to start next round, then start next round \n    socket.emit('playerReady', { code, round: currentGameRound }, ({ gameState }) => {\n      if (gameState) {\n\n      }\n    })\n  }\n\n  const renderGameState = () => {\n    if (loading) return <FlexContainer><Spinner /></FlexContainer>\n    if (gameEnded) return <FinalScreen handleRestartGame={handleRestartGame} scores={finalScores} />\n    if (!gameStarted) return <StartGameScreen handleStartGame={handleStartGame} isAdmin={isAdmin} />\n    else if (allScoresCollected)\n      return <ScoreTable maxRounds={maxRounds} handleStartNextRound={handleStartNextRound} round={currentGameRound} gameState={gameState} />\n    else if (responseSubmitted && !allResponsesCollected)\n      return <FlexContainer><Spinner /></FlexContainer>\n    else if (allResponsesCollected)\n      return <ResultsTable scorePartner={scorePartner} scoreSubmitted={scoreSubmitted} handleSubmitScore={handleSubmitScore} round={currentGameRound} gameState={gameState} />\n    else\n      return <>\n        {(gameStarted) ? <GameHeader soundOn={soundOn} maxRounds={maxRounds} timerValue={timerValue} roundNumber={currentGameRound} currentAlphabet={currentAlphabet} /> : false}\n        <InputTable categories={categories} timerValue={timerValue} sendResponse={sendResponse} />\n      </>\n  }\n\n  return <Container>\n    <ExitButtonContainer><ExitButton onClick={() => {\n      socket.emit('removeUserFromGame', { code }, () => {\n        gtag(\"event\", \"close_game\")\n        setGamePlaying(false)\n      })\n    }}>X</ExitButton></ExitButtonContainer>\n    {!gameEnded && <ActivePlayers code={code} gameStarted={gameStarted || gameEnded} users={users} />}\n    {renderGameState()}\n  </Container>\n}\n\nexport default Play;"]},"metadata":{},"sourceType":"module"}