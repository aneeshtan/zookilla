{"ast":null,"code":"var _jsxFileName = \"/Users/farshadghazanfari/Documents/www/npat/components/Create.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { hri } from 'human-readable-ids';\nimport { Button, StyledInput, FlexColumn, FlexContainer } from './StyledComponents';\nimport { socket } from '../constants/websocket';\nconst FormContainer = styled.div.withConfig({\n  displayName: \"Create__FormContainer\",\n  componentId: \"sc-1xf6e0b-0\"\n})([\"padding:40px;padding-top:30px;display:flex;flex-direction:column;text-align:center;\"]);\nconst CheckBoxContainer = styled.div.withConfig({\n  displayName: \"Create__CheckBoxContainer\",\n  componentId: \"sc-1xf6e0b-1\"\n})([\"margin:0 20px 20px 0;\"]);\n\nconst Create = ({\n  cancel,\n  setGameData,\n  setGamePlaying\n}) => {\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: rounds,\n    1: setRounds\n  } = useState(\"5\");\n  const {\n    0: scoringType,\n    1: setScoringType\n  } = useState(\"cross\");\n  const {\n    0: categories,\n    1: setCategories\n  } = useState({\n    Name: true,\n    Place: true,\n    Animal: true,\n    Thing: true,\n    Songs: false,\n    Movies: false,\n    \"TV shows\": false,\n    Fruits: false,\n    Vegetables: false,\n    Books: false,\n    Subjects: false,\n    Celebrities: false,\n    Musicians: false,\n    Instruments: false\n  }); // Monzo easter egg\n\n  useEffect(() => {\n    if (name === \"Monzo\") {\n      setCategories(Object.assign({}, categories, {\n        \"Office Dog Breeds\": false,\n        \"Meeting Rooms\": false,\n        \"Badge Types\": false,\n        \"Activity Types\": false,\n        \"Engineers\": false,\n        \"Data Scientists\": false\n      }));\n    }\n  }, [name]);\n  const categoriesArray = Object.keys(categories);\n  const options = [\"5\", \"7\", \"10\"];\n  const gameData = {\n    name,\n    isAdmin: true\n  };\n\n  const handleCreateGame = code => {\n    let cats = [];\n    categoriesArray.forEach(cat => {\n      if (categories[cat]) cats.push(cat);\n    });\n    socket.emit('create', {\n      name,\n      code,\n      rounds,\n      categories: cats,\n      scoringType\n    }, ({\n      error,\n      users\n    }) => {\n      if (error) {\n        gtag('event', 'create_error', {\n          error\n        });\n        alert(error);\n      } else {\n        gameData.code = code;\n        gameData.users = users;\n        gameData.maxRounds = Number(rounds);\n        gameData.categories = cats;\n        setGameData(gameData);\n        setGamePlaying(true);\n      }\n    });\n  };\n\n  let disabled = !name || !checkAtleastOneSelected(categoriesArray, categories);\n  return __jsx(FormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, __jsx(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, __jsx(FlexColumn, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, \"Your Name:\"), __jsx(StyledInput, {\n    maxLength: \"15\",\n    name: \"name\",\n    type: \"text\",\n    onChange: event => setName(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  })), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, \"Select number of rounds:\"), __jsx(FlexContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, options.map(option => __jsx(CheckBoxContainer, {\n    key: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 36\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    id: option,\n    name: \"rounds\",\n    value: option,\n    onChange: event => setRounds(event.target.value),\n    checked: rounds === option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }), __jsx(\"label\", {\n    htmlFor: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, option)))), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, \"Select categories:\"), __jsx(FlexContainer, {\n    style: {\n      maxWidth: \"450px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, categoriesArray.map(cat => __jsx(CheckBoxContainer, {\n    key: cat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 41\n    }\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    id: cat,\n    name: \"categories\",\n    onChange: event => {\n      setCategories(Object.assign({}, categories, {\n        [cat]: event.target.checked\n      }));\n    },\n    checked: categories[cat],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }), __jsx(\"label\", {\n    htmlFor: cat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, cat)))), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, \"Scoring Rules:\"), __jsx(FlexContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, __jsx(CheckBoxContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    id: \"cross\",\n    name: \"scoring\",\n    value: \"cross\",\n    onChange: event => setScoringType(event.target.value),\n    checked: scoringType === \"cross\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"cross\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, \"Score Each Other\")), __jsx(CheckBoxContainer, {\n    key: \"self\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    id: \"self\",\n    name: \"scoring\",\n    value: \"self\",\n    onChange: event => setScoringType(event.target.value),\n    checked: scoringType === \"self\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }), __jsx(\"label\", {\n    htmlFor: \"self\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }, \"Score Yourself\"))), __jsx(Button, {\n    disabled: disabled,\n    fontSize: \"25px\",\n    padding: \"15px\",\n    minWidth: \"220px\",\n    onClick: event => {\n      gtag('event', 'create_room', {\n        categories: categoriesArray.join(','),\n        rounds: rounds\n      });\n      event.preventDefault();\n      let code = hri.random();\n      handleCreateGame(code);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, \"Create Room\")), __jsx(Button, {\n    fontSize: \"25px\",\n    padding: \"15px\",\n    minWidth: \"220px\",\n    onClick: () => cancel(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, \"Cancel\")));\n};\n\nconst checkAtleastOneSelected = (categoriesList, categories) => {\n  let enableButton = false;\n  categoriesList.forEach(category => {\n    if (categories[category]) {\n      enableButton = true;\n    }\n  });\n  return enableButton;\n};\n\nexport default Create;","map":{"version":3,"sources":["/Users/farshadghazanfari/Documents/www/npat/components/Create.js"],"names":["React","useState","useEffect","styled","hri","Button","StyledInput","FlexColumn","FlexContainer","socket","FormContainer","div","CheckBoxContainer","Create","cancel","setGameData","setGamePlaying","name","setName","rounds","setRounds","scoringType","setScoringType","categories","setCategories","Name","Place","Animal","Thing","Songs","Movies","Fruits","Vegetables","Books","Subjects","Celebrities","Musicians","Instruments","Object","assign","categoriesArray","keys","options","gameData","isAdmin","handleCreateGame","code","cats","forEach","cat","push","emit","error","users","gtag","alert","maxRounds","Number","disabled","checkAtleastOneSelected","event","target","value","map","option","maxWidth","checked","join","preventDefault","random","categoriesList","enableButton","category"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { hri } from 'human-readable-ids';\n\nimport { Button, StyledInput, FlexColumn, FlexContainer } from './StyledComponents'\nimport { socket } from '../constants/websocket'\n\nconst FormContainer = styled.div`\n  padding: 40px;\n  padding-top: 30px;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n`\n\nconst CheckBoxContainer = styled.div`\n  margin: 0 20px 20px 0;\n`\n\nconst Create = ({ cancel, setGameData, setGamePlaying }) => {\n  const [name, setName] = useState('');\n  const [rounds, setRounds] = useState(\"5\");\n  const [scoringType, setScoringType] = useState(\"cross\");\n  const [categories, setCategories] = useState({\n    Name: true,\n    Place: true,\n    Animal: true,\n    Thing: true,\n    Songs: false,\n    Movies: false,\n    \"TV shows\": false,\n    Fruits: false,\n    Vegetables: false,\n    Books: false,\n    Subjects: false,\n    Celebrities: false,\n    Musicians: false,\n    Instruments: false\n  })\n\n  // Monzo easter egg\n  useEffect(() => {\n    if (name === \"Monzo\") {\n      setCategories(Object.assign({}, categories, {\n        \"Office Dog Breeds\": false,\n        \"Meeting Rooms\": false,\n        \"Badge Types\": false,\n        \"Activity Types\": false,\n        \"Engineers\": false,\n        \"Data Scientists\": false\n      }))\n    }\n\n  }, [name])\n\n  const categoriesArray = Object.keys(categories);\n\n  const options = [\"5\", \"7\", \"10\"]\n  const gameData = {\n    name, isAdmin: true\n  }\n\n  const handleCreateGame = (code) => {\n    let cats = [];\n    categoriesArray.forEach(cat => {\n      if (categories[cat]) cats.push(cat);\n    });\n\n    socket.emit('create', { name, code, rounds, categories: cats, scoringType }, ({ error, users }) => {\n      if (error) {\n        gtag('event', 'create_error', {\n          error\n        })\n        alert(error);\n      } else {\n        gameData.code = code;\n        gameData.users = users;\n        gameData.maxRounds = Number(rounds);\n        gameData.categories = cats;\n        setGameData(gameData)\n        setGamePlaying(true)\n      }\n    });\n  }\n\n  let disabled = !name || !checkAtleastOneSelected(categoriesArray, categories)\n\n  return (\n    <FormContainer>\n      <form>\n        <FlexColumn>\n          <p>\n            <label htmlFor=\"name\">Your Name:</label>\n            <StyledInput maxLength=\"15\" name=\"name\" type=\"text\" onChange={(event) => setName(event.target.value)} />\n          </p>\n          <h2>Select number of rounds:</h2>\n          <FlexContainer>\n            {options.map(option => <CheckBoxContainer key={option}>\n              <input type=\"radio\" id={option} name=\"rounds\" value={option} onChange={(event) => setRounds(event.target.value)} checked={rounds === option} />\n              <label htmlFor={option}>{option}</label>\n            </CheckBoxContainer>)}\n          </FlexContainer>\n          <h2>Select categories:</h2>\n          <FlexContainer style={{ maxWidth: \"450px\" }}>\n            {categoriesArray.map(cat => <CheckBoxContainer key={cat}>\n              <input type=\"checkbox\" id={cat} name=\"categories\" onChange={(event) => {\n                setCategories(Object.assign({}, categories, { [cat]: event.target.checked }))\n              }} checked={categories[cat]} />\n              <label htmlFor={cat}>{cat}</label>\n            </CheckBoxContainer>)}\n          </FlexContainer>\n          <h2>Scoring Rules:</h2>\n          <FlexContainer>\n            <CheckBoxContainer>\n              <input type=\"radio\" id=\"cross\" name=\"scoring\" value=\"cross\" onChange={(event) => setScoringType(event.target.value)} checked={scoringType === \"cross\"} />\n              <label htmlFor=\"cross\">Score Each Other</label>\n            </CheckBoxContainer>\n            <CheckBoxContainer key=\"self\">\n              <input type=\"radio\" id=\"self\" name=\"scoring\" value=\"self\" onChange={(event) => setScoringType(event.target.value)} checked={scoringType === \"self\"} />\n              <label htmlFor=\"self\">Score Yourself</label>\n            </CheckBoxContainer>\n\n          </FlexContainer>\n          <Button disabled={disabled} fontSize=\"25px\" padding=\"15px\" minWidth=\"220px\" onClick={(event) => {\n            gtag('event', 'create_room', {\n              categories: categoriesArray.join(','),\n              rounds: rounds\n            });\n            event.preventDefault()\n            let code = hri.random();\n            handleCreateGame(code);\n          }}>Create Room</Button>\n        </FlexColumn>\n        <Button fontSize=\"25px\" padding=\"15px\" minWidth=\"220px\" onClick={() => cancel()}>Cancel</Button>\n      </form>\n    </FormContainer>\n  )\n}\n\n\nconst checkAtleastOneSelected = (categoriesList, categories) => {\n  let enableButton = false;\n  categoriesList.forEach(category => {\n    if (categories[category]) {\n      enableButton = true;\n    }\n  })\n  return enableButton\n}\n\nexport default Create"]},"metadata":{},"sourceType":"module"}