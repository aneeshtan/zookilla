{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport theme from '../../constants/theme';\nimport { socket } from '../../constants/websocket';\nimport { FlexContainer, Spinner, ExitButton, ExitButtonContainer } from '../StyledComponents';\nimport InputTable from './InputTable';\nimport ResultsTable from './ResultsTable';\nimport ScoreTable from './ScoreTable';\nimport ActivePlayers from './PlayerList';\nimport GameHeader from './GameHeader';\nimport FinalScreen from './FinalScreen';\nimport StartGameScreen from './StartGameScreen';\nconst Container = styled.div.withConfig({\n  displayName: \"Play__Container\",\n  componentId: \"q76vgx-0\"\n})([\"font-family:\", \";padding-top:80px;\"], theme.font);\n\nconst Play = ({\n  gameData,\n  setGamePlaying,\n  soundOn\n}) => {\n  const {\n    0: users,\n    1: setUsers\n  } = useState([]);\n  const {\n    0: code,\n    1: setCode\n  } = useState('');\n  const {\n    0: currentGameRound,\n    1: setCurrentGameRound\n  } = useState(1);\n  const {\n    0: responseSubmitted,\n    1: setResponseSubmitted\n  } = useState(false);\n  const {\n    0: scoreSubmitted,\n    1: setScoreSubmitted\n  } = useState(false);\n  const {\n    0: allScoresCollected,\n    1: setAllScoresCollected\n  } = useState(false);\n  const {\n    0: allResponsesCollected,\n    1: setAllResponsesCollected\n  } = useState(false);\n  const {\n    0: currentAlphabet,\n    1: setCurrentAlphabet\n  } = useState('');\n  const {\n    0: gameState,\n    1: setGameState\n  } = useState({});\n  const {\n    0: gameStarted,\n    1: startGame\n  } = useState(false);\n  const {\n    0: timerValue,\n    1: setTimerValue\n  } = useState(0);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: gameEnded,\n    1: setGameEnded\n  } = useState(false);\n  const {\n    0: finalScores,\n    1: setFinalScores\n  } = useState([]);\n  const {\n    0: maxRounds,\n    1: setMaxRounds\n  } = useState(0);\n  const {\n    0: categories,\n    1: setCategories\n  } = useState([]);\n  const {\n    0: isAdmin,\n    1: setAdmin\n  } = useState(gameData.isAdmin);\n  const {\n    0: scorePartner,\n    1: setScorePartner\n  } = useState({}); // const isAdmin = gameData.isAdmin;\n\n  useEffect(() => {\n    const {\n      code,\n      users,\n      maxRounds,\n      categories\n    } = gameData;\n    setUsers(users);\n    setCode(code);\n    setMaxRounds(Number(maxRounds));\n    setCategories(categories);\n  }, [gameData]);\n  useEffect(() => {\n    socket.on(\"restartGame\", () => {\n      setFinalScores([]);\n      setGameEnded(false);\n    });\n    socket.on(\"gameData\", ({\n      users\n    }) => {\n      setUsers(users);\n    });\n    socket.on(\"allSubmitted\", ({\n      gameState,\n      scorePartners\n    }) => {\n      setGameState(Object.assign({}, gameState));\n      scorePartners.forEach(scorePartner => {\n        if (scorePartner[0].id === socket.id) {\n          setScorePartner(scorePartner[1]);\n        }\n      });\n      setAllResponsesCollected(true);\n    });\n    socket.on(\"allScoresSubmitted\", ({\n      gameState\n    }) => {\n      setGameState(Object.assign({}, gameState));\n      setAllScoresCollected(true);\n    });\n    socket.on(\"allPlayersReady\", ({\n      gameState\n    }) => {\n      setLoading(true);\n      setGameState(Object.assign({}, gameState));\n      setCurrentGameRound(gameState.currentRound);\n      setResponseSubmitted(false);\n      setAllResponsesCollected(false);\n      setAllScoresCollected(false);\n      setScoreSubmitted(false);\n      setTimerValue(0);\n      setCurrentAlphabet(gameState.currentAlphabet);\n      setLoading(false);\n    });\n    socket.on(\"gameStarted\", ({\n      gameState\n    }) => {\n      startGame(gameState.started);\n      setCurrentAlphabet(gameState.currentAlphabet);\n    });\n    socket.on(\"gameEnded\", ({\n      scores,\n      gameState\n    }) => {\n      setLoading(true);\n      setGameState(Object.assign({}, gameState));\n      setCurrentGameRound(1);\n      setResponseSubmitted(false);\n      setAllResponsesCollected(false);\n      setAllScoresCollected(false);\n      setScoreSubmitted(false);\n      setTimerValue(0);\n      setCurrentAlphabet('');\n      setGameEnded(true);\n      startGame(false);\n      setLoading(false);\n      setUsers(gameState.users); // New person who starts the game will be admin\n\n      setAdmin(false);\n      setFinalScores(scores);\n    });\n    socket.on(\"timerValue\", ({\n      timer\n    }) => {\n      setTimerValue(timer);\n    });\n  }, []); // Sumbit users respnse\n\n  const sendResponse = response => {\n    // forEach category, make a response object\n    socket.emit('sendResponse', {\n      code,\n      response,\n      round: currentGameRound\n    }, () => {\n      setResponseSubmitted(true);\n      socket.emit('stopTimer', {\n        code\n      });\n    });\n  };\n\n  const handleSubmitScore = (score, id) => {\n    let submitScore;\n    submitScore = score ? score : 0;\n    socket.emit('sendScore', {\n      id,\n      code,\n      score: submitScore,\n      round: currentGameRound\n    }, ({\n      error,\n      gameState\n    }) => {\n      if (error) alert(error);else if (gameState) {\n        setScoreSubmitted(true);\n      }\n    });\n  };\n\n  const handleStartGame = () => {\n    socket.emit('startGame', {\n      code\n    }, gameState => {\n      if (gameState) {\n        startGame(gameState.started);\n        setLoading(false);\n      }\n    });\n  };\n\n  const handleRestartGame = event => {\n    event.preventDefault();\n    startGame(false);\n    socket.emit('restartGame', {\n      code\n    }, () => {\n      setFinalScores([]);\n      setGameEnded(false);\n      setAdmin(true);\n    });\n  };\n\n  const handleStartNextRound = () => {\n    // If everyone is ready to start next round, then start next round \n    socket.emit('playerReady', {\n      code,\n      round: currentGameRound\n    }, ({\n      gameState\n    }) => {\n      if (gameState) {}\n    });\n  };\n\n  const renderGameState = () => {\n    if (loading) return __jsx(FlexContainer, null, __jsx(Spinner, null));\n    if (gameEnded) return __jsx(FinalScreen, {\n      handleRestartGame: handleRestartGame,\n      scores: finalScores\n    });\n    if (!gameStarted) return __jsx(StartGameScreen, {\n      handleStartGame: handleStartGame,\n      isAdmin: isAdmin\n    });else if (allScoresCollected) return __jsx(ScoreTable, {\n      maxRounds: maxRounds,\n      handleStartNextRound: handleStartNextRound,\n      round: currentGameRound,\n      gameState: gameState\n    });else if (responseSubmitted && !allResponsesCollected) return __jsx(FlexContainer, null, __jsx(Spinner, null));else if (allResponsesCollected) return __jsx(ResultsTable, {\n      scorePartner: scorePartner,\n      scoreSubmitted: scoreSubmitted,\n      handleSubmitScore: handleSubmitScore,\n      round: currentGameRound,\n      gameState: gameState\n    });else return __jsx(React.Fragment, null, gameStarted ? __jsx(GameHeader, {\n      soundOn: soundOn,\n      maxRounds: maxRounds,\n      timerValue: timerValue,\n      roundNumber: currentGameRound,\n      currentAlphabet: currentAlphabet\n    }) : false, __jsx(InputTable, {\n      categories: categories,\n      timerValue: timerValue,\n      sendResponse: sendResponse\n    }));\n  };\n\n  return __jsx(Container, null, __jsx(ExitButtonContainer, null, __jsx(ExitButton, {\n    onClick: () => {\n      socket.emit('removeUserFromGame', {\n        code\n      }, () => {\n        gtag(\"event\", \"close_game\");\n        setGamePlaying(false);\n      });\n    }\n  }, \"X\")), !gameEnded && __jsx(ActivePlayers, {\n    code: code,\n    gameStarted: gameStarted || gameEnded,\n    users: users\n  }), renderGameState());\n};\n\nexport default Play;","map":null,"metadata":{},"sourceType":"module"}