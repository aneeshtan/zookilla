{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport theme from '../../constants/theme';\nimport { socket } from '../../constants/websocket';\nimport { FlexContainer, Spinner, ExitButton, ExitButtonContainer } from '../StyledComponents';\nimport InputTable from './InputTable';\nimport ResultsTable from './ResultsTable';\nimport ScoreTable from './ScoreTable';\nimport ActivePlayers from './PlayerList';\nimport GameHeader from './GameHeader';\nimport FinalScreen from './FinalScreen';\nimport StartGameScreen from './StartGameScreen';\nvar Container = styled.div.withConfig({\n  displayName: \"Play__Container\",\n  componentId: \"q76vgx-0\"\n})([\"font-family:\", \";padding-top:80px;\"], theme.font);\n\nvar Play = function Play(_ref) {\n  var gameData = _ref.gameData,\n      setGamePlaying = _ref.setGamePlaying,\n      soundOn = _ref.soundOn;\n\n  var _useState = useState([]),\n      users = _useState[0],\n      setUsers = _useState[1];\n\n  var _useState2 = useState(''),\n      code = _useState2[0],\n      setCode = _useState2[1];\n\n  var _useState3 = useState(1),\n      currentGameRound = _useState3[0],\n      setCurrentGameRound = _useState3[1];\n\n  var _useState4 = useState(false),\n      responseSubmitted = _useState4[0],\n      setResponseSubmitted = _useState4[1];\n\n  var _useState5 = useState(false),\n      scoreSubmitted = _useState5[0],\n      setScoreSubmitted = _useState5[1];\n\n  var _useState6 = useState(false),\n      allScoresCollected = _useState6[0],\n      setAllScoresCollected = _useState6[1];\n\n  var _useState7 = useState(false),\n      allResponsesCollected = _useState7[0],\n      setAllResponsesCollected = _useState7[1];\n\n  var _useState8 = useState(''),\n      currentAlphabet = _useState8[0],\n      setCurrentAlphabet = _useState8[1];\n\n  var _useState9 = useState({}),\n      gameState = _useState9[0],\n      setGameState = _useState9[1];\n\n  var _useState10 = useState(false),\n      gameStarted = _useState10[0],\n      startGame = _useState10[1];\n\n  var _useState11 = useState(0),\n      timerValue = _useState11[0],\n      setTimerValue = _useState11[1];\n\n  var _useState12 = useState(false),\n      loading = _useState12[0],\n      setLoading = _useState12[1];\n\n  var _useState13 = useState(false),\n      gameEnded = _useState13[0],\n      setGameEnded = _useState13[1];\n\n  var _useState14 = useState([]),\n      finalScores = _useState14[0],\n      setFinalScores = _useState14[1];\n\n  var _useState15 = useState(0),\n      maxRounds = _useState15[0],\n      setMaxRounds = _useState15[1];\n\n  var _useState16 = useState([]),\n      categories = _useState16[0],\n      setCategories = _useState16[1];\n\n  var _useState17 = useState(gameData.isAdmin),\n      isAdmin = _useState17[0],\n      setAdmin = _useState17[1];\n\n  var _useState18 = useState({}),\n      scorePartner = _useState18[0],\n      setScorePartner = _useState18[1]; // const isAdmin = gameData.isAdmin;\n\n\n  useEffect(function () {\n    var code = gameData.code,\n        users = gameData.users,\n        maxRounds = gameData.maxRounds,\n        categories = gameData.categories;\n    setUsers(users);\n    setCode(code);\n    setMaxRounds(Number(maxRounds));\n    setCategories(categories);\n  }, [gameData]);\n  useEffect(function () {\n    socket.on(\"restartGame\", function () {\n      setFinalScores([]);\n      setGameEnded(false);\n    });\n    socket.on(\"gameData\", function (_ref2) {\n      var users = _ref2.users;\n      setUsers(users);\n    });\n    socket.on(\"allSubmitted\", function (_ref3) {\n      var gameState = _ref3.gameState,\n          scorePartners = _ref3.scorePartners;\n      setGameState(Object.assign({}, gameState));\n      scorePartners.forEach(function (scorePartner) {\n        if (scorePartner[0].id === socket.id) {\n          setScorePartner(scorePartner[1]);\n        }\n      });\n      setAllResponsesCollected(true);\n    });\n    socket.on(\"allScoresSubmitted\", function (_ref4) {\n      var gameState = _ref4.gameState;\n      setGameState(Object.assign({}, gameState));\n      setAllScoresCollected(true);\n    });\n    socket.on(\"allPlayersReady\", function (_ref5) {\n      var gameState = _ref5.gameState;\n      setLoading(true);\n      setGameState(Object.assign({}, gameState));\n      setCurrentGameRound(gameState.currentRound);\n      setResponseSubmitted(false);\n      setAllResponsesCollected(false);\n      setAllScoresCollected(false);\n      setScoreSubmitted(false);\n      setTimerValue(0);\n      setCurrentAlphabet(gameState.currentAlphabet);\n      setLoading(false);\n    });\n    socket.on(\"gameStarted\", function (_ref6) {\n      var gameState = _ref6.gameState;\n      startGame(gameState.started);\n      setCurrentAlphabet(gameState.currentAlphabet);\n    });\n    socket.on(\"gameEnded\", function (_ref7) {\n      var scores = _ref7.scores,\n          gameState = _ref7.gameState;\n      setLoading(true);\n      setGameState(Object.assign({}, gameState));\n      setCurrentGameRound(1);\n      setResponseSubmitted(false);\n      setAllResponsesCollected(false);\n      setAllScoresCollected(false);\n      setScoreSubmitted(false);\n      setTimerValue(0);\n      setCurrentAlphabet('');\n      setGameEnded(true);\n      startGame(false);\n      setLoading(false);\n      setUsers(gameState.users); // New person who starts the game will be admin\n\n      setAdmin(false);\n      setFinalScores(scores);\n    });\n    socket.on(\"timerValue\", function (_ref8) {\n      var timer = _ref8.timer;\n      setTimerValue(timer);\n    });\n  }, []); // Sumbit users respnse\n\n  var sendResponse = function sendResponse(response) {\n    // forEach category, make a response object\n    socket.emit('sendResponse', {\n      code: code,\n      response: response,\n      round: currentGameRound\n    }, function () {\n      setResponseSubmitted(true);\n      socket.emit('stopTimer', {\n        code: code\n      });\n    });\n  };\n\n  var handleSubmitScore = function handleSubmitScore(score, id) {\n    var submitScore;\n    submitScore = score ? score : 0;\n    socket.emit('sendScore', {\n      id: id,\n      code: code,\n      score: submitScore,\n      round: currentGameRound\n    }, function (_ref9) {\n      var error = _ref9.error,\n          gameState = _ref9.gameState;\n      if (error) alert(error);else if (gameState) {\n        setScoreSubmitted(true);\n      }\n    });\n  };\n\n  var handleStartGame = function handleStartGame() {\n    socket.emit('startGame', {\n      code: code\n    }, function (gameState) {\n      if (gameState) {\n        startGame(gameState.started);\n        setLoading(false);\n      }\n    });\n  };\n\n  var handleRestartGame = function handleRestartGame(event) {\n    event.preventDefault();\n    startGame(false);\n    socket.emit('restartGame', {\n      code: code\n    }, function () {\n      setFinalScores([]);\n      setGameEnded(false);\n      setAdmin(true);\n    });\n  };\n\n  var handleStartNextRound = function handleStartNextRound() {\n    // If everyone is ready to start next round, then start next round \n    socket.emit('playerReady', {\n      code: code,\n      round: currentGameRound\n    }, function (_ref10) {\n      var gameState = _ref10.gameState;\n\n      if (gameState) {}\n    });\n  };\n\n  var renderGameState = function renderGameState() {\n    if (loading) return __jsx(FlexContainer, null, __jsx(Spinner, null));\n    if (gameEnded) return __jsx(FinalScreen, {\n      handleRestartGame: handleRestartGame,\n      scores: finalScores\n    });\n    if (!gameStarted) return __jsx(StartGameScreen, {\n      handleStartGame: handleStartGame,\n      isAdmin: isAdmin\n    });else if (allScoresCollected) return __jsx(ScoreTable, {\n      maxRounds: maxRounds,\n      handleStartNextRound: handleStartNextRound,\n      round: currentGameRound,\n      gameState: gameState\n    });else if (responseSubmitted && !allResponsesCollected) return __jsx(FlexContainer, null, __jsx(Spinner, null));else if (allResponsesCollected) return __jsx(ResultsTable, {\n      scorePartner: scorePartner,\n      scoreSubmitted: scoreSubmitted,\n      handleSubmitScore: handleSubmitScore,\n      round: currentGameRound,\n      gameState: gameState\n    });else return __jsx(React.Fragment, null, gameStarted ? __jsx(GameHeader, {\n      soundOn: soundOn,\n      maxRounds: maxRounds,\n      timerValue: timerValue,\n      roundNumber: currentGameRound,\n      currentAlphabet: currentAlphabet\n    }) : false, __jsx(InputTable, {\n      categories: categories,\n      timerValue: timerValue,\n      sendResponse: sendResponse\n    }));\n  };\n\n  return __jsx(Container, null, __jsx(ExitButtonContainer, null, __jsx(ExitButton, {\n    onClick: function onClick() {\n      socket.emit('removeUserFromGame', {\n        code: code\n      }, function () {\n        setGamePlaying(false);\n      });\n    }\n  }, \"X\")), !gameEnded && __jsx(ActivePlayers, {\n    code: code,\n    gameStarted: gameStarted || gameEnded,\n    users: users\n  }), renderGameState());\n};\n\nexport default Play;","map":null,"metadata":{},"sourceType":"module"}