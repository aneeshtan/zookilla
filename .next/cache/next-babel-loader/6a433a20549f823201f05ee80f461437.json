{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { hri } from 'human-readable-ids';\nimport { Button, StyledInput, FlexColumn, FlexContainer } from './StyledComponents';\nimport { socket } from '../constants/websocket';\nconst FormContainer = styled.div.withConfig({\n  displayName: \"Create__FormContainer\",\n  componentId: \"sc-1xf6e0b-0\"\n})([\"max-width:500px;max-height:80vh;margin:auto;padding:20px;background:rgba(255,255,255,0.8);border-radius:10px;box-shadow:0 4px 6px rgba(0,0,0,0.1);overflow-y:auto;\"]);\nconst MultiSelect = styled.select.withConfig({\n  displayName: \"Create__MultiSelect\",\n  componentId: \"sc-1xf6e0b-1\"\n})([\"width:100%;padding:10px;margin:10px 0;border-radius:5px;border:1px solid #ccc;background-color:white;box-sizing:border-box;height:150px;overflow-y:auto;\"]);\nconst Select = styled.select.withConfig({\n  displayName: \"Create__Select\",\n  componentId: \"sc-1xf6e0b-2\"\n})([\"width:100%;padding:10px;margin:10px 0;border-radius:5px;border:1px solid #ccc;background-color:white;box-sizing:border-box;\"]);\nconst CheckBoxContainer = styled.div.withConfig({\n  displayName: \"Create__CheckBoxContainer\",\n  componentId: \"sc-1xf6e0b-3\"\n})([\"margin:0 20px 20px 0;\"]);\n\nconst Create = ({\n  cancel,\n  setGameData,\n  setGamePlaying\n}) => {\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: rounds,\n    1: setRounds\n  } = useState(\"5\");\n  const {\n    0: scoringType,\n    1: setScoringType\n  } = useState(\"ai\");\n  const {\n    0: categories,\n    1: setCategories\n  } = useState({\n    Name: true,\n    Place: true,\n    Animal: true,\n    Thing: true,\n    Songs: false,\n    Movies: false,\n    \"TV shows\": false,\n    Fruits: false,\n    //Vegetables: false,\n    Books: false,\n    //Subjects: false,\n    Celebrities: false,\n    Musicians: false,\n    Instruments: false\n  });\n\n  const generateRandomCode = length => {\n    let code = '';\n\n    for (let i = 0; i < length; i++) {\n      code += Math.floor(Math.random() * 10); // Generate a random digit\n    }\n\n    return code;\n  }; // Monzo easter egg\n\n\n  useEffect(() => {\n    if (name === \"Monzo\") {\n      setCategories(Object.assign({}, categories, {\n        \"Office Dog Breeds\": false,\n        \"Meeting Rooms\": false,\n        \"Badge Types\": false,\n        \"Activity Types\": false,\n        \"Engineers\": false,\n        \"Data Scientists\": false\n      }));\n    }\n  }, [name]);\n  const categoriesArray = Object.keys(categories);\n  const options = [\"5\", \"7\", \"10\"];\n  const gameData = {\n    name,\n    isAdmin: true\n  };\n\n  const handleCreateGame = code => {\n    let cats = [];\n    categoriesArray.forEach(cat => {\n      if (categories[cat]) cats.push(cat);\n    });\n    socket.emit('create', {\n      name,\n      code,\n      rounds,\n      categories: cats,\n      scoringType\n    }, ({\n      error,\n      users\n    }) => {\n      if (error) {\n        alert(error);\n      } else {\n        gameData.code = code;\n        gameData.users = users;\n        gameData.maxRounds = Number(rounds);\n        gameData.categories = cats;\n        setGameData(gameData);\n        setGamePlaying(true);\n      }\n    });\n  };\n\n  let disabled = !name || !checkAtleastOneSelected(categoriesArray, categories);\n  const {\n    0: selectedCategories,\n    1: setSelectedCategories\n  } = useState([]);\n  useEffect(() => {\n    const defaultSelected = Object.keys(categories).filter(cat => categories[cat]);\n    setSelectedCategories(defaultSelected);\n  }, []); // Empty dependency array ensures this runs once on mount\n\n  return __jsx(FormContainer, null, __jsx(\"form\", null, __jsx(FlexColumn, null, __jsx(\"p\", null, __jsx(\"label\", {\n    htmlFor: \"name\"\n  }, \"Your Name:\"), __jsx(StyledInput, {\n    maxLength: \"15\",\n    name: \"name\",\n    type: \"text\",\n    onChange: event => setName(event.target.value)\n  })), __jsx(\"h4\", null, \"Number of rounds:\"), __jsx(FlexContainer, null, options.map(option => __jsx(CheckBoxContainer, {\n    key: option\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    id: option,\n    name: \"rounds\",\n    value: option,\n    onChange: event => setRounds(event.target.value),\n    checked: rounds === option\n  }), __jsx(\"label\", {\n    htmlFor: option\n  }, option)))), __jsx(\"h4\", null, \"Select Topics:\"), __jsx(FlexContainer, {\n    style: {\n      maxWidth: \"450px\"\n    }\n  }, __jsx(MultiSelect, {\n    multiple: true,\n    value: selectedCategories,\n    onChange: event => {\n      const selectedOptions = Array.from(event.target.selectedOptions, option => option.value);\n      setSelectedCategories(selectedOptions);\n    }\n  }, Object.keys(categories).map(cat => __jsx(\"option\", {\n    key: cat,\n    value: cat\n  }, cat)))), __jsx(FlexContainer, null, __jsx(Select, {\n    value: scoringType,\n    onChange: event => setScoringType(event.target.value)\n  }, __jsx(\"option\", {\n    value: \"cross\"\n  }, \"Score Each Other\"), __jsx(\"option\", {\n    value: \"self\"\n  }, \"Score Yourself\"), __jsx(\"option\", {\n    value: \"ai\"\n  }, \"Score by AI\"))), __jsx(Button, {\n    disabled: disabled,\n    fontSize: \"25px\",\n    padding: \"15px\",\n    minWidth: \"220px\",\n    onClick: event => {\n      event.preventDefault(); //let code = hri.random();\n\n      let code = generateRandomCode(4); // Use your custom function here\n\n      handleCreateGame(code);\n    }\n  }, \"Create Room\")), __jsx(Button, {\n    fontSize: \"25px\",\n    padding: \"15px\",\n    minWidth: \"220px\",\n    onClick: () => cancel()\n  }, \"Cancel\")));\n};\n\nconst checkAtleastOneSelected = (categoriesList, categories) => {\n  let enableButton = false;\n  categoriesList.forEach(category => {\n    if (categories[category]) {\n      enableButton = true;\n    }\n  });\n  return enableButton;\n};\n\nexport default Create;","map":null,"metadata":{},"sourceType":"module"}