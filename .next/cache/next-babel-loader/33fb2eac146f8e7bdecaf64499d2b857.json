{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Button, Spinner, FlexColumn, FlexContainer } from '../StyledComponents';\nimport theme from '../../constants/theme';\nimport { socket } from '../../constants/websocket';\nvar TableContainer = styled.div.withConfig({\n  displayName: \"ResultsTable__TableContainer\",\n  componentId: \"sc-1lg56mx-0\"\n})([\"display:flex;flex-wrap:wrap;justify-content:space-around;\"]);\nvar Container = styled.div.withConfig({\n  displayName: \"ResultsTable__Container\",\n  componentId: \"sc-1lg56mx-1\"\n})([\"padding:20px 0;display:flex;flex-direction:row;justify-content:center;flex-wrap:wrap;\"]);\nvar Paper = styled.div.withConfig({\n  displayName: \"ResultsTable__Paper\",\n  componentId: \"sc-1lg56mx-2\"\n})([\"background:white;background-size:100% 1.2em;height:auto;margin:0 auto;margin-top:30px;box-shadow:#9e9e9e63 6px 7px 14px 0px;width:250px;padding:30px 30px 30px 30px;background-image:linear-gradient(90deg,transparent 49px,transparent 49px,transparent 51px,transparent 51px),linear-gradient(#eee .1em,transparent .1em);\"]);\nvar Submission = styled.span.withConfig({\n  displayName: \"ResultsTable__Submission\",\n  componentId: \"sc-1lg56mx-3\"\n})([\"color:\", \";word-break:break-all;\"], theme.colors.blue);\nvar StyledIncrementButton = styled.button.withConfig({\n  displayName: \"ResultsTable__StyledIncrementButton\",\n  componentId: \"sc-1lg56mx-4\"\n})([\"font-weight:bold;font-size:14px;border:\", \";color:\", \";cursor:\", \";\"], function (props) {\n  return props.disabled ? '1px solid gray' : '1px solid black';\n}, function (props) {\n  return props.disabled ? 'gray' : 'black';\n}, function (props) {\n  return props.disabled ? 'not-allowed' : 'pointer';\n});\nvar InputContainer = styled.div.withConfig({\n  displayName: \"ResultsTable__InputContainer\",\n  componentId: \"sc-1lg56mx-5\"\n})([\"margin-left:15px;font-size:1.5em;display:flex;align-items:center;width:80px;justify-content:space-between;\"]);\nvar NumberContainer = styled.div.withConfig({\n  displayName: \"ResultsTable__NumberContainer\",\n  componentId: \"sc-1lg56mx-6\"\n})([\"margin-left:15px;font-size:1.5em;display:flex;align-items:center;width:80px;justify-content:center;\"]);\n\nvar ResultsTable = function ResultsTable(_ref) {\n  var gameState = _ref.gameState,\n      round = _ref.round,\n      handleSubmitScore = _ref.handleSubmitScore,\n      scoreSubmitted = _ref.scoreSubmitted,\n      scorePartner = _ref.scorePartner;\n  var initialScore = {};\n  var categories = gameState.categories;\n  var scoringId = gameState.scoringType === \"cross\" ? scorePartner.id : socket.id; // sort users so the person being score always comes first\n\n  var users = sortUserList(_toConsumableArray(gameState.users), scoringId);\n  users.forEach(function (user) {\n    categories.forEach(function (cat) {\n      var similar = similarityCheck(cat, users, user.id, round);\n\n      if (user.id === scoringId && similar.value) {\n        initialScore = Object.assign({}, initialScore, _defineProperty({}, cat, 5));\n      }\n    });\n  });\n\n  var _useState = useState(initialScore),\n      currentScore = _useState[0],\n      setCurrentScore = _useState[1]; // Function to call the API and get the score\n\n\n  var getScoreFromAPI = function getScoreFromAPI(category, answer) {\n    var response, data;\n    return _regeneratorRuntime.async(function getScoreFromAPI$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"/api/check-answer\", {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                category: category,\n                answer: answer\n              })\n            }));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data.isCorrect ? 1 : 0);\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(\"Error checking answer:\", _context.t0);\n            return _context.abrupt(\"return\", 0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  }; // Modify the scoring logic\n\n\n  var handleScoring = function handleScoring() {\n    var newScores, _iterator, _step, category, answer, score;\n\n    return _regeneratorRuntime.async(function handleScoring$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            newScores = _objectSpread({}, currentScore);\n            _iterator = _createForOfIteratorHelper(categories);\n            _context2.prev = 2;\n\n            _iterator.s();\n\n          case 4:\n            if ((_step = _iterator.n()).done) {\n              _context2.next = 13;\n              break;\n            }\n\n            category = _step.value;\n            answer = getUserResponse(category); // Function to get user's response\n\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(getScoreFromAPI(category, answer));\n\n          case 9:\n            score = _context2.sent;\n            newScores[category] = score;\n\n          case 11:\n            _context2.next = 4;\n            break;\n\n          case 13:\n            _context2.next = 18;\n            break;\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](2);\n\n            _iterator.e(_context2.t0);\n\n          case 18:\n            _context2.prev = 18;\n\n            _iterator.f();\n\n            return _context2.finish(18);\n\n          case 21:\n            setCurrentScore(newScores);\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[2, 15, 18, 21]], Promise);\n  };\n\n  var totalScore = 0;\n  useEffect(function () {\n    totalScore = sumAllScores(currentScore);\n  }, [currentScore]);\n  return __jsx(React.Fragment, null, gameState.scoringType === \"cross\" ? __jsx(FlexContainer, null, __jsx(\"h1\", null, \"You are scoring for \", __jsx(Submission, null, scorePartner.name), \"!\")) : false, __jsx(TableContainer, null, users.map(function (user) {\n    return __jsx(Paper, {\n      key: user.id\n    }, __jsx(\"h2\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between'\n      }\n    }, __jsx(\"span\", null, user.name), user.id === scoringId ? __jsx(\"span\", null, \"Score\") : false), categories.map(function (category) {\n      var similar = similarityCheck(category, users, user.id, round);\n      var selfScoreCard = user.id === scoringId;\n      return __jsx(React.Fragment, {\n        key: category\n      }, similar.value && selfScoreCard ? __jsx(\"span\", {\n        style: {\n          color: theme.colors.red\n        }\n      }, scorePartner.name || 'You', \" and \", similar.name, \" put down the same word for \", category) : false, __jsx(\"div\", {\n        style: {\n          marginBottom: '10px',\n          display: \"flex\",\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        },\n        key: category\n      }, __jsx(\"div\", {\n        style: {\n          width: selfScoreCard ? \"150px\" : \"auto\",\n          fontSize: \"1.2em\"\n        }\n      }, category, \":\", \"  \", \" \", __jsx(Submission, null, user.responses[round][category] || '-')), selfScoreCard ? user.responses[round][category] ? __jsx(InputContainer, null, __jsx(NumberInput, {\n        category: category,\n        setCurrentScore: setCurrentScore,\n        currentScore: currentScore,\n        value: similar.value ? 5 : 0\n      }), \" \") : __jsx(NumberContainer, null, \"0\") : ''));\n    }), user.id === scoringId ? __jsx(\"h2\", null, \"Total Score: \".concat(sumAllScores(currentScore))) : false);\n  })), __jsx(Container, null, !scoreSubmitted ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: function onClick(event) {\n      event.preventDefault();\n      handleSubmitScore(totalScore, scoringId);\n    }\n  }, \"Submit\")) : __jsx(FlexColumn, null, __jsx(\"h2\", null, \"Waiting for others\"), __jsx(Spinner, null))));\n};\n\nvar similarityCheck = function similarityCheck(category, users, currentUserId, round) {\n  var currentUser = users.find(function (user) {\n    return user.id === currentUserId;\n  });\n  var currentUserResponse = currentUser.responses[round][category] ? currentUser.responses[round][category].toLowerCase().trim() : null;\n  var value = false;\n  var name = null;\n  users.filter(function (user) {\n    return user.id !== currentUserId;\n  }).forEach(function (user) {\n    var otherResponse = user.responses[round][category] ? user.responses[round][category].toLowerCase().trim() : null;\n\n    if (currentUserResponse && otherResponse && currentUserResponse === otherResponse) {\n      value = true;\n      name = user.name;\n    }\n\n    return;\n  });\n  return {\n    value: value,\n    name: name\n  };\n};\n\nvar sumAllScores = function sumAllScores(scores) {\n  return Object.keys(scores).map(function (cat) {\n    return scores[cat];\n  }).reduce(function (a, b) {\n    return a + b;\n  }, 0);\n};\n\nvar NumberInput = function NumberInput(_ref2) {\n  var value = _ref2.value,\n      currentScore = _ref2.currentScore,\n      setCurrentScore = _ref2.setCurrentScore,\n      category = _ref2.category;\n\n  var _useState2 = useState(value),\n      numberValue = _useState2[0],\n      setNumberValue = _useState2[1];\n\n  useEffect(function () {\n    setCurrentScore(Object.assign({}, currentScore, _defineProperty({}, category, value)));\n  }, []);\n\n  var onMinus = function onMinus() {\n    setCurrentScore(Object.assign({}, currentScore, _defineProperty({}, category, numberValue - 5)));\n    if (!(numberValue <= 0)) setNumberValue(numberValue - 5);\n  };\n\n  var onPlus = function onPlus() {\n    setCurrentScore(Object.assign({}, currentScore, _defineProperty({}, category, numberValue + 5)));\n    if (!(numberValue >= 10)) setNumberValue(numberValue + 5);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(StyledIncrementButton, {\n    disabled: numberValue === 0,\n    onClick: function onClick() {\n      return onMinus();\n    }\n  }, \"-\"), numberValue, __jsx(StyledIncrementButton, {\n    disabled: numberValue === 10,\n    onClick: function onClick() {\n      return onPlus();\n    }\n  }, \"+\"));\n};\n\nvar sortUserList = function sortUserList(users, scoringId) {\n  var index = users.findIndex(function (user) {\n    return user.id === scoringId;\n  });\n\n  if (index != -1) {\n    var first = users.splice(index, 1)[0];\n    users.unshift(first);\n    return users;\n  }\n\n  return users;\n};\n\nexport default ResultsTable;","map":null,"metadata":{},"sourceType":"module"}