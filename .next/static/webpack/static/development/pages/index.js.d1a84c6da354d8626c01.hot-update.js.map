{"version":3,"file":"static/webpack/static/development/pages/index.js.d1a84c6da354d8626c01.hot-update.js","sources":["webpack:///./components/Create.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { hri } from 'human-readable-ids';\n\nimport { Button, StyledInput, FlexColumn, FlexContainer } from './StyledComponents'\nimport { socket } from '../constants/websocket'\n\nconst FormContainer = styled.div`\n  max-width: 500px;\n  max-height: 80vh; // Maximum height, adjust as needed\n  margin: auto;\n  padding: 20px;\n  background: rgba(255, 255, 255, 0.8);\n  border-radius: 10px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  overflow-y: auto; // Enable vertical scrolling\n`;\n\nconst MultiSelect = styled.select`\n  width: 100%;\n  padding: 10px;\n  margin: 10px 0;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n  background-color: white;\n  box-sizing: border-box;\n  height: 200px; // Adjust height as needed\n  overflow-y: auto;\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  padding: 10px;\n  margin: 10px 0;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n  background-color: white;\n  box-sizing: border-box;\n`;\nconst CheckBoxContainer = styled.div`\n  margin: 0 20px 20px 0;\n`\n\nconst Create = ({ cancel, setGameData, setGamePlaying }) => {\n  const [name, setName] = useState('');\n  const [rounds, setRounds] = useState(\"5\");\n  const [scoringType, setScoringType] = useState(\"ai\");\n  const [categories, setCategories] = useState({\n    Name: true,\n    Place: true,\n    Animal: true,\n    Thing: true,\n    Songs: false,\n    Movies: false,\n    \"TV shows\": false,\n    Fruits: false,\n    //Vegetables: false,\n    Books: false,\n    //Subjects: false,\n    Celebrities: false,\n    Musicians: false,\n    Instruments: false\n  })\n\n  const generateRandomCode = (length) => {\n    let code = '';\n    for (let i = 0; i < length; i++) {\n        code += Math.floor(Math.random() * 10); // Generate a random digit\n    }\n    return code;\n  }\n\n  // Monzo easter egg\n  useEffect(() => {\n    if (name === \"Monzo\") {\n      setCategories(Object.assign({}, categories, {\n        \"Office Dog Breeds\": false,\n        \"Meeting Rooms\": false,\n        \"Badge Types\": false,\n        \"Activity Types\": false,\n        \"Engineers\": false,\n        \"Data Scientists\": false\n      }))\n    }\n\n  }, [name])\n\n  const categoriesArray = Object.keys(categories);\n\n  const options = [\"5\", \"7\", \"10\"]\n  const gameData = {\n    name, isAdmin: true\n  }\n\n  const handleCreateGame = (code) => {\n    let cats = [];\n    categoriesArray.forEach(cat => {\n      if (categories[cat]) cats.push(cat);\n    });\n\n    socket.emit('create', { name, code, rounds, categories: cats, scoringType }, ({ error, users }) => {\n      if (error) {\n         \n        alert(error);\n      } else {\n        gameData.code = code;\n        gameData.users = users;\n        gameData.maxRounds = Number(rounds);\n        gameData.categories = cats;\n        setGameData(gameData)\n        setGamePlaying(true)\n      }\n    });\n  }\n\n  let disabled = !name || !checkAtleastOneSelected(categoriesArray, categories)\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  useEffect(() => {\n    const defaultSelected = Object.keys(categories).filter(cat => categories[cat]);\n    setSelectedCategories(defaultSelected);\n  }, []); // Empty dependency array ensures this runs once on mount\n\n  return (\n    <FormContainer>\n      <form>\n        <FlexColumn>\n          <p>\n            <label htmlFor=\"name\">Your Name:</label>\n            <StyledInput maxLength=\"15\" name=\"name\" type=\"text\" onChange={(event) => setName(event.target.value)} />\n          </p>\n          <h4>Number of rounds:</h4>\n          <FlexContainer>\n            {options.map(option => <CheckBoxContainer key={option}>\n              <input type=\"radio\" id={option} name=\"rounds\" value={option} onChange={(event) => setRounds(event.target.value)} checked={rounds === option} />\n              <label htmlFor={option}>{option}</label>\n            </CheckBoxContainer>)}\n          </FlexContainer>\n          <h4>Select Subjects:</h4>\n          <FlexContainer style={{ maxWidth: \"450px\" }}>\n              <MultiSelect multiple value={selectedCategories} onChange={(event) => {\n                const selectedOptions = Array.from(event.target.selectedOptions, option => option.value);\n                setSelectedCategories(selectedOptions);\n              }}>\n                {Object.keys(categories).map(cat => (\n                  <option key={cat} value={cat}>{cat}</option>\n                ))}\n              </MultiSelect>\n            </FlexContainer>\n          <FlexContainer>\n            <Select\n              value={scoringType}\n              onChange={(event) => setScoringType(event.target.value)}\n            >\n              <option value=\"cross\">Score Each Other</option>\n              <option value=\"self\">Score Yourself</option>\n              <option value=\"ai\">Score by AI</option>\n            </Select>\n          </FlexContainer>\n          <Button disabled={disabled} fontSize=\"25px\" padding=\"15px\" minWidth=\"220px\" onClick={(event) => {\n\n            event.preventDefault()\n            //let code = hri.random();\n            let code = generateRandomCode(4); // Use your custom function here\n\n            handleCreateGame(code);\n          }}>Create Room</Button>\n        </FlexColumn>\n        <Button fontSize=\"25px\" padding=\"15px\" minWidth=\"220px\" onClick={() => cancel()}>Cancel</Button>\n      </form>\n    </FormContainer>\n  )\n}\n\n\nconst checkAtleastOneSelected = (categoriesList, categories) => {\n  let enableButton = false;\n  categoriesList.forEach(category => {\n    if (categories[category]) {\n      enableButton = true;\n    }\n  })\n  return enableButton\n}\n\nexport default Create"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAJA;AAAA;AACA;AAoBA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzEA;AAAA;AAAA;AACA;AAysourceRoot":""}