{"version":3,"file":"static/webpack/static/development/pages/index.js.2d2865178c52fc62a06f.hot-update.js","sources":["webpack:///./components/Game/ResultsTable.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Button, Spinner, FlexColumn, FlexContainer } from '../StyledComponents'\nimport theme from '../../constants/theme'\nimport { socket } from '../../constants/websocket'\nimport Papa from 'papaparse';\n\nconst TableContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`\n\nconst Container = styled.div`\n  padding: 20px 0;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  flex-wrap: wrap;\n`\n\nconst Paper = styled.div`\n  background: white;\n  background-size: 100% 1.2em;\n  height: auto;\n  margin: 0 auto;\n  margin-top: 30px;\n  box-shadow: #9e9e9e63 6px 7px 14px 0px;\n  width: 250px;\n  padding: 30px 30px 30px 30px;\n  background-image:\n  linear-gradient(90deg, transparent 49px, transparent 49px, transparent 51px, transparent 51px),\n  linear-gradient(#eee .1em, transparent .1em);\n`\n\nconst Submission = styled.span`\n  color: ${theme.colors.blue};\n  word-break: break-all;\n`\n\nconst StyledIncrementButton = styled.button`\n  font-weight: bold;\n  font-size: 14px;\n  border: ${props => props.disabled ? '1px solid gray' : '1px solid black'};\n  color: ${props => props.disabled ? 'gray' : 'black'};\n  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};\n`\n\nconst InputContainer = styled.div`\n  margin-left: 15px;\n  font-size: 1.5em;\n  display: flex;\n  align-items: center;\n  width: 80px;\n  justify-content: space-between;\n`\n\nconst NumberContainer = styled.div`\n  margin-left: 15px;\n  font-size: 1.5em;\n  display: flex;\n  align-items: center;\n  width: 80px;\n  justify-content: center;\n`\n\nconst ResultsTable = ({ gameState, round, handleSubmitScore, scoreSubmitted, scorePartner }) => {\n  let initialScore = {}\n  const [scores, setScores] = useState({});\n  const [loading, setLoading] = useState(true);\n  const categories = gameState.categories;\n  let scoringId = gameState.scoringType === \"cross\" ? scorePartner.id : socket.id;\n  let users = sortUserList([...gameState.users], scoringId);\n\n  users.forEach(user => {\n    categories.forEach(cat => {\n      let similar = similarityCheck(cat, users, user.id, round)\n      if (user.id === scoringId && similar.value) {\n\n        initialScore = Object.assign({}, initialScore, { [cat]: 5 })\n      }\n    })\n  })\n\n  const [currentScore, setCurrentScore] = useState(initialScore);\n  const [animalsSet, setAnimalsSet] = useState(new Set());\n\n  const parseCSV = async (filePath) => {\n    const response = await fetch(filePath);\n    const reader = response.body.getReader();\n    const result = await reader.read();\n    const decoder = new TextDecoder('utf-8');\n    const csv = decoder.decode(result.value);\n    return new Promise((resolve, reject) => {\n      Papa.parse(csv, {\n        complete: (results) => {\n          resolve(results.data.map(row => row[0]));\n        },\n        error: reject\n      });\n    });\n  };\n\n\n  useEffect(() => {\n    parseCSV('/csv/animals.csv').then(data => {\n      setAnimalsSet(new Set(data.map(animal => animal.toLowerCase().trim())));\n    });\n    parseCSV('/csv/countries.csv').then(data => {\n      setPlacesSet(new Set(data.map(animal => animal.toLowerCase().trim())));\n    });\n    parseCSV('/csv/names.csv').then(data => {\n      setNamesSet(new Set(data.map(animal => animal.toLowerCase().trim())));\n    });\n  }, []); // Empty dependency array to run only once on mount\n  \n\n  const scoreEntriesAI = async () => {\n\n    if (animalsSet.size === 0) {\n      console.log(\"Waiting for animalsSet to be populated...\");\n      return; // Exit if animalsSet is not ready\n    }\n\n    const newScores = {};\n    for (const category of categories) {\n      for (const user of gameState.users) {\n        const answer = user.responses[round][category];\n        if (answer) {\n          const score = await getScoreFromAPI(category, answer);\n          newScores[user.id] = { ...(newScores[user.id] || {}), [category]: score };\n        }\n      }\n    }\n    setScores(newScores);\n    setLoading(false);\n  };\n\n\n  const getScoreFromAPI = async (category, answer) => {\n    try {\n        const formattedAnswer = answer.toLowerCase().trim();\n        console.log(`Checking answer: '${formattedAnswer}' in category: '${category}'`);\n\n        if (category === 'Animal') {\n           // console.log(`Animals in set:`, Array.from(animalsSet));\n            if (animalsSet.has(formattedAnswer)) {\n                console.log(`'${formattedAnswer}' is a valid animal.`);\n                return 10; // Answer is correct\n            } else {\n                console.log(`'${formattedAnswer}' is not found in the set.`);\n            }\n        } else if (category === 'Name') {\n            // Implement logic for 'Name' category\n            // You need a separate set or logic for 'Name' category\n        } else if (category === 'Thing') {\n            // Implement logic for 'Thing' category\n            // You need a separate set or logic for 'Thing' category\n        }\n\n        return 0; // Answer is incorrect or not in the category\n    } catch (error) {\n        console.error(\"Error checking answer:\", error);\n        return 0;\n    }\n};\n\n\n  let totalScore = 0;\n  useEffect(() => {\n    if(gameState.scoringType === \"ai\" && animalsSet.size > 0) {\n      scoreEntriesAI();\n    }\n  }, [gameState, round, animalsSet]); // Add animalsSet as a dependency\n  \n\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  return <>\n\n{gameState.scoringType === \"ai\" ? ( \n  <TableContainer>\n  {gameState.users.map(user => (\n    <Paper key={user.id}>\n      <h2>{user.name}</h2>\n      {gameState.categories.map(category => (\n        <div key={category}>\n          {category}: <Submission>{user.responses[round][category] || '-'}</Submission>\n          <span>Score: {scores[user.id] && scores[user.id][category]}</span>\n        </div>\n      ))}\n      <h2>Total Score: {Object.values(scores[user.id] || {}).reduce((a, b) => a + b, 0)}</h2>\n    </Paper>\n  ))}\n</TableContainer>\n    ) : (\n      <>\n    {gameState.scoringType === \"cross\" ? <FlexContainer><h1>You are scoring for <Submission>{scorePartner.name}</Submission>!</h1></FlexContainer> : false}\n    <TableContainer>\n      {users.map(user => <Paper key={user.id}>\n        <h2 style={{ display: 'flex', justifyContent: 'space-between' }}><span>{user.name}</span>\n          {user.id === scoringId ? <span>Score</span> : false}\n        </h2>\n        {categories.map(category => {\n          let similar = similarityCheck(category, users, user.id, round)\n          let selfScoreCard = user.id === scoringId;\n          return <React.Fragment key={category}>\n            {similar.value && selfScoreCard ? <span style={{ color: theme.colors.red }}>{scorePartner.name || 'You'} and {similar.name} put down the same word for {category}</span> : false}\n            <div style={{ marginBottom: '10px', display: \"flex\", justifyContent: 'space-between', alignItems: 'center' }} key={category}>\n              <div style={{ width: selfScoreCard ? \"150px\" : \"auto\", fontSize: \"1.2em\" }}>\n                {category}:{`  `} <Submission>{user.responses[round][category] || '-'}</Submission>\n              </div>\n              {selfScoreCard ?\n                user.responses[round][category] ? <InputContainer>\n                  <NumberInput category={category} setCurrentScore={setCurrentScore} currentScore={currentScore} value={similar.value ? 5 : 0} /> </InputContainer> : <NumberContainer>0</NumberContainer>\n                : ''}\n            </div>\n          </React.Fragment>\n        }\n        )}\n        {user.id === scoringId ? <h2>{`Total Score: ${sumAllScores(currentScore)}`}</h2> : false}\n      </Paper>)}\n    </TableContainer>\n    </>\n    )}\n    <Container>\n      {!scoreSubmitted ? <>\n        <Button onClick={(event) => {\n          event.preventDefault()\n          handleSubmitScore(totalScore, scoringId)\n        }}>Submit</Button>\n      </> : <FlexColumn>\n          <h2>Waiting for others</h2>\n          <Spinner />\n        </FlexColumn>}\n    </Container>\n  </>\n  \n}\n\nconst similarityCheck = (category, users, currentUserId, round) => {\n  let currentUser = users.find(user => user.id === currentUserId);\n  let currentUserResponse = currentUser.responses[round][category] ? currentUser.responses[round][category].toLowerCase().trim() : null;\n\n  let value = false;\n  let name = null;\n  users.filter(user => user.id !== currentUserId).forEach(user => {\n    let otherResponse = user.responses[round][category] ? user.responses[round][category].toLowerCase().trim() : null;\n    if (currentUserResponse && otherResponse && (currentUserResponse === otherResponse)) {\n      value = true;\n      name = user.name\n    }\n    return;\n  })\n  return { value, name };\n}\n\nconst sumAllScores = (scores) => Object.keys(scores).map(cat => scores[cat]).reduce((a, b) => a + b, 0)\n\nconst NumberInput = ({ value, currentScore, setCurrentScore, category }) => {\n  const [numberValue, setNumberValue] = useState(value)\n  useEffect(() => {\n    setCurrentScore(Object.assign({}, currentScore, { [category]: value }))\n  }, [])\n\n  const onMinus = () => {\n    setCurrentScore(Object.assign({}, currentScore, { [category]: numberValue - 5 }))\n    if (!(numberValue <= 0)) setNumberValue(numberValue - 5)\n  }\n\n  const onPlus = () => {\n    setCurrentScore(Object.assign({}, currentScore, { [category]: numberValue + 5 }))\n    if (!(numberValue >= 10)) setNumberValue(numberValue + 5)\n  }\n  return <><StyledIncrementButton disabled={numberValue === 0} onClick={() => onMinus()}>-</StyledIncrementButton>{numberValue}<StyledIncrementButton disabled={numberValue === 10} onClick={() => onPlus()}>+</StyledIncrementButton></>\n}\n\n\nconst sortUserList = (users, scoringId) => {\n  let index = users.findIndex(user => user.id === scoringId);\n  if (index != -1) {\n    let first = users.splice(index, 1)[0];\n    users.unshift(first);\n    return users;\n  }\n  return users\n}\n\n\nexport default ResultsTable;"],"mappings":"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","sourceRoot":""}