{"version":3,"file":"static/webpack/static/development/pages/index.js.3da1b24423ad449fa00b.hot-update.js","sources":["webpack:///./components/Create.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { hri } from 'human-readable-ids';\n\nimport { Button, StyledInput, FlexColumn, FlexContainer } from './StyledComponents'\nimport { socket } from '../constants/websocket'\n \nconst FormContainer = styled.div`\npadding: 20px;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\ntext-align: center;\nwidth: 100%;\n`\n\nconst CheckBoxContainer = styled.label`\ndisplay: block;\nmargin: 10px;\ncursor: pointer;\nfont-size: 1rem;\n\ninput {\n  margin-right: 5px;\n}\n\n@media (min-width: 576px) {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n`\n\nconst RadioGroup = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\n\n@media (min-width: 576px) {\n  flex-direction: row;\n}\n`\n\nconst CategoryContainer = styled.div`\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\ngap: 10px;\nmargin-top: 20px;\nwidth: 100%;\n`\n\nconst Create = ({ cancel, setGameData, setGamePlaying }) => {\n  const [name, setName] = useState('');\n  const [rounds, setRounds] = useState(\"5\");\n  const [scoringType, setScoringType] = useState(\"ai\");\n  const [categories, setCategories] = useState({\n    Name: true,\n    Place: true,\n    Animal: true,\n    Thing: true,\n    Songs: false,\n    Movies: false,\n    \"TV shows\": false,\n    Fruits: false,\n    //Vegetables: false,\n    Books: false,\n    //Subjects: false,\n    Celebrities: false,\n    Musicians: false,\n    Instruments: false\n  })\n\n  const generateRandomCode = (length) => {\n    let code = '';\n    for (let i = 0; i < length; i++) {\n        code += Math.floor(Math.random() * 10); // Generate a random digit\n    }\n    return code;\n  }\n\n  // Monzo easter egg\n  useEffect(() => {\n    if (name === \"Monzo\") {\n      setCategories(Object.assign({}, categories, {\n        \"Office Dog Breeds\": false,\n        \"Meeting Rooms\": false,\n        \"Badge Types\": false,\n        \"Activity Types\": false,\n        \"Engineers\": false,\n        \"Data Scientists\": false\n      }))\n    }\n\n  }, [name])\n\n  const categoriesArray = Object.keys(categories);\n\n  const options = [\"5\", \"7\", \"10\"]\n  const gameData = {\n    name, isAdmin: true\n  }\n\n  const handleCreateGame = (code) => {\n    let cats = [];\n    categoriesArray.forEach(cat => {\n      if (categories[cat]) cats.push(cat);\n    });\n\n    socket.emit('create', { name, code, rounds, categories: cats, scoringType }, ({ error, users }) => {\n      if (error) {\n         \n        alert(error);\n      } else {\n        gameData.code = code;\n        gameData.users = users;\n        gameData.maxRounds = Number(rounds);\n        gameData.categories = cats;\n        setGameData(gameData)\n        setGamePlaying(true)\n      }\n    });\n  }\n\n  let disabled = !name || !checkAtleastOneSelected(categoriesArray, categories)\n \n  return (\n    <FormContainer>\n      <form>\n]          {/* Name input and other form fields */}\n          \n          {/* Number of rounds */}\n          <h2>Select number of rounds:</h2>\n          <RadioGroup>\n            {options.map(option => (\n              <CheckBoxContainer key={option}>\n                <input type=\"radio\" id={option} name=\"rounds\" value={option} onChange={(event) => setRounds(event.target.value)} checked={rounds === option} />\n                {option}\n              </CheckBoxContainer>\n            ))}\n          </RadioGroup>\n\n          {/* Categories */}\n          <h2>Select categories:</h2>\n          <CategoryContainer>\n            {categoriesArray.map(cat => (\n              <CheckBoxContainer key={cat}>\n                <input type=\"checkbox\" id={cat} name=\"categories\" onChange={(event) => {\n                  setCategories({ ...categories, [cat]: event.target.checked })\n                }} checked={categories[cat]} />\n                {cat}\n              </CheckBoxContainer>\n            ))}\n          </CategoryContainer>\n\n          {/* Scoring rules */}\n          <h2>Scoring Rules:</h2>\n          <RadioGroup>\n            <CheckBoxContainer>\n              <input type=\"radio\" id=\"cross\" name=\"scoring\" value=\"cross\" onChange={(event) => setScoringType(event.target.value)} checked={scoringType === \"cross\"} />\n              Score Each Other\n            </CheckBoxContainer>\n            <CheckBoxContainer key=\"self\">\n              <input type=\"radio\" id=\"self\" name=\"scoring\" value=\"self\" onChange={(event) => setScoringType(event.target.value)} checked={scoringType === \"self\"} />\n              Score Yourself\n            </CheckBoxContainer>\n            <CheckBoxContainer key=\"ai\">\n              <input type=\"radio\" id=\"ai\" name=\"scoring\" value=\"ai\" onChange={(event) => setScoringType(event.target.value)} checked={scoringType === \"ai\"} />\n              Score by AI\n            </CheckBoxContainer>\n          </RadioGroup>\n\n          {/* Create and Cancel buttons */}\n          <Button disabled={disabled} fontSize=\"25px\" padding=\"15px\" minWidth=\"220px\" onClick={(event) => {\n            event.preventDefault()\n            let code = generateRandomCode(4); // Use your custom function here\n            handleCreateGame(code);\n          }}>Create Room</Button>\n\n          <Button fontSize=\"25px\" padding=\"15px\" minWidth=\"220px\" onClick={() => cancel()}>Cancel</Button>\n      </form>\n    </FormContainer>\n  )\n}\n\n\nconst checkAtleastOneSelected = (categoriesList, categories) => {\n  let enableButton = false;\n  categoriesList.forEach(category => {\n    if (categories[category]) {\n      enableButton = true;\n    }\n  })\n  return enableButton\n}\n\nexport default Create"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAJA;AAAA;AACA;AAoBA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}